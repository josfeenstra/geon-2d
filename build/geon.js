(()=>{"use strict";eval('\n// CONCATENATED MODULE: ./src/2D/Renderer2.ts\n// author: Jos Feenstra\r\n// only renderer talks to ctx & canvas.\r\n// do all the camera work in here\r\nclass Renderer2 {\r\n    constructor(canvas, geon) {\r\n        this.pointsize = 5;\r\n        this.pointcolor = "#ffffff";\r\n        this.linecolor = "#ffffff";\r\n        this.geon = geon;\r\n        this.ctx = canvas.getContext("2d");\r\n        this.ctx.fillStyle = this.pointcolor;\r\n        this.ctx.strokeStyle = this.linecolor;\r\n    }\r\n    // this clears with a transparant layer, for easy delayed effect\r\n    clearFade(alpha) {\r\n        // adjust color settings\r\n        const color = this.ctx.fillStyle;\r\n        this.ctx.fillStyle = "#000000ff";\r\n        this.ctx.globalAlpha = alpha;\r\n        this.ctx.fillRect(0, 0, this.geon.width, this.geon.height);\r\n        // reset color settings \r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.fillStyle = color;\r\n    }\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.geon.width, this.geon.height);\r\n    }\r\n    point(x, y) {\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.pointsize, 0, Math.PI * 2, false);\r\n        this.ctx.fill();\r\n    }\r\n    line(line) {\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(line.from.x, line.from.y);\r\n        this.ctx.lineTo(line.to.x, line.to.y);\r\n        this.ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/math/Vector2.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- \'factories\'\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Geon.ts\n\r\n\r\nclass Geon {\r\n    constructor(canvas) {\r\n        this.looping = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.mouse = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        // window\r\n        this.canvas = canvas;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n        this.setWindow();\r\n        // window.onresize = this.setWindow;\r\n        // rendering\r\n        this.r = new Renderer2(canvas, this);\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        // mouse\r\n        canvas.onmousemove = this.setMousePos.bind(this);\r\n        canvas.onmousedown = this.setMouseDown.bind(this);\r\n        canvas.onmouseup = this.setMouseUp.bind(this);\r\n        canvas.oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation(); // no menu\r\n        };\r\n        // keyboard\r\n        canvas.setAttribute("tabindex", \'0\');\r\n        canvas.onkeydown = this.onKeyDown.bind(this);\r\n        canvas.onkeypress = this.onKeyPressed.bind(this);\r\n        canvas.onkeyup = this.onKeyUp.bind(this);\r\n        for (let i = 0; i < 223; i++) {\r\n            this.keysDown[i] = false;\r\n        }\r\n    }\r\n    // ...\r\n    load(game) {\r\n        this.program = game;\r\n        game.start(this);\r\n        if (!this.looping)\r\n            this.loop();\r\n    }\r\n    loadMeta(program) {\r\n        this.meta = program;\r\n        program.start(this);\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    // ...\r\n    loop() {\r\n        this.looping = true;\r\n        function step() {\r\n            var _a, _b;\r\n            // update time\r\n            this.newTime = Date.now();\r\n            this.tick += (this.newTime - this.oldTime);\r\n            this.oldTime = this.newTime;\r\n            // update mouse\r\n            this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n            this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n            this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n            this.mouseLeftPrev = this.mouseLeftDown;\r\n            this.mouseRightPrev = this.mouseRightDown;\r\n            this.mouseMiddlePrev = this.mouseMiddleDown;\r\n            // TODO : dont update if nothing moved (?)\r\n            this.program.update(this);\r\n            this.r.clear();\r\n            this.program.draw(this);\r\n            // update metaprogram afterwards\r\n            (_a = this.meta) === null || _a === void 0 ? void 0 : _a.update(this);\r\n            (_b = this.meta) === null || _b === void 0 ? void 0 : _b.draw(this);\r\n            // refresh keypresses\r\n            this.keysPressed = [];\r\n            // Call the game loop\r\n            window.requestAnimationFrame(step.bind(this));\r\n        }\r\n        window.requestAnimationFrame(step.bind(this));\r\n    }\r\n    setMousePos(e) {\r\n        this.mouse = new Vector2(e.clientX, e.clientY);\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n    }\r\n    setWindow() {\r\n        console.log("setting window...");\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n        this.canvas.style.width = this.canvas.width + "px";\r\n        this.canvas.style.height = this.canvas.height + "px";\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n    }\r\n}\r\n// export enum Key\r\n// {\r\n//     keyleft = 37,\r\n//     keyup = 38,\r\n//     keyright = 39,\r\n//     keydown = 40,\r\n//     key0 = 48,\r\n//     key1 = 49,\r\n//     key2 = 50,\r\n//     key3 = 51,\r\n//     key4 = 52,\r\n//     key5 = 53,\r\n//     key6 = 54,\r\n//     key7 = 55,\r\n//     key8 = 56,\r\n//     key9 = 57,\r\n// }\r\n\n// CONCATENATED MODULE: ./src/programs/Program.ts\nclass Program {\r\n    start(geon) {\r\n        //  init geometry \r\n    }\r\n    update(geon) {\r\n        // update geometry\r\n    }\r\n    draw(geon) {\r\n        // draw geometry\r\n    }\r\n    exit(geon) {\r\n        // deallocate ? clean?\r\n    }\r\n}\r\n// just a flag for now\r\nclass MetaProgram extends Program {\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Selector.ts\n\r\n// metaprogram\r\nclass SelectorMetaProgram extends MetaProgram {\r\n    constructor(programs) {\r\n        super();\r\n        this.current = 0;\r\n        this.isAnimating = false;\r\n        this.animationCounter = 1;\r\n        this.comeback = false;\r\n        this.programs = programs;\r\n        if (this.programs.length == 0)\r\n            throw "Need at least 1 program!";\r\n    }\r\n    start(geon) {\r\n        this.programs[this.current];\r\n    }\r\n    update(geon) {\r\n        // listen for keypresses \r\n        // stupid i know. More specific listening would be better.\r\n        for (let i = 1; i < 10; i++) {\r\n            if (geon.IsKeyPressed(i.toString())) {\r\n                this.prepareSwapProgram(i - 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        const speed = 0.015;\r\n        if (this.isAnimating) {\r\n            if (this.animationCounter > 1) {\r\n                this.isAnimating = false;\r\n            }\r\n            geon.r.clearFade(1 - this.animationCounter);\r\n            if (this.animationCounter > 0) {\r\n                if (this.comeback)\r\n                    this.animationCounter += speed;\r\n                else\r\n                    this.animationCounter -= speed;\r\n            }\r\n            else {\r\n                this.animationCounter += 0.01;\r\n                this.comeback = true;\r\n                this.swapProgram(geon);\r\n            }\r\n        }\r\n        // draw transitions\r\n    }\r\n    prepareSwapProgram(num) {\r\n        if (num < 0 || num >= this.programs.length) {\r\n            console.log("no program [" + num.toString() + "].");\r\n            return;\r\n        }\r\n        console.log("swapping to program " + num.toString());\r\n        // prepare for animation\r\n        this.current = num;\r\n        this.isAnimating = true;\r\n        this.comeback = false;\r\n        this.animationCounter = 1;\r\n        // load\r\n        // fade in\r\n    }\r\n    swapProgram(geon) {\r\n        geon.load(new this.programs[this.current]());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/BounceBalls.ts\n\r\n\r\nclass BounceBallsProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.points = [];\r\n        this.vectors = [];\r\n        this.count = 100;\r\n        this.speed = 2;\r\n    }\r\n    start(geon) {\r\n        this.points = new Array(this.count);\r\n        this.vectors = new Array(this.count);\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.points[i] = Vector2.fromRandom().mul(geon.bounds);\r\n            this.vectors[i] = Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize();\r\n        }\r\n        console.log("created a bunch of points");\r\n    }\r\n    update(geon) {\r\n        for (let i = 0; i < this.count; i++) {\r\n            let p = this.points[i];\r\n            let v = this.vectors[i];\r\n            if (geon.mouseLeftDown) {\r\n                // disrupt the vector, based on how closeby the mouse is\r\n                let dir = Vector2.from2Pt(p, geon.mouse);\r\n                let length = dir.length();\r\n                dir.normalize().scale(Math.min(4, 100 / length));\r\n                v.add(dir);\r\n            }\r\n            p.add(v);\r\n            let length = v.length();\r\n            if (length > this.speed) {\r\n                v.setLength(length * 0.99);\r\n            }\r\n            // bounce at edge\r\n            if (p.x < 0 || p.x > geon.bounds.x)\r\n                v.x = -v.x;\r\n            if (p.y < 0 || p.y > geon.bounds.y)\r\n                v.y = -v.y;\r\n        }\r\n        // if mouse is nearby, move away from it\r\n        if (geon.mouseRightPressed) {\r\n            for (let i = 0; i < 100; i++) {\r\n                this.count += 1;\r\n                this.points.push(Vector2.fromRandom().mul(geon.bounds));\r\n                this.vectors.push(Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize());\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        this.points.forEach(p => geon.r.point(p.x, p.y));\r\n        // draw at mouse position;\r\n        if (geon.mouseLeftDown) {\r\n            geon.r.point(geon.mouse.x, geon.mouse.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/geo2/line2.ts\n// author : Jos Feenstra\r\nclass Line2 {\r\n    constructor(from, to) {\r\n        this.from = from;\r\n        this.to = to;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Voronoi.ts\n\r\n\r\n\r\nclass VoronoiProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.vectors = [];\r\n        this.lines = [];\r\n    }\r\n    start(geon) {\r\n        this.vectors.push(new Vector2(geon.width / 2, geon.height / 2));\r\n    }\r\n    update(geon) {\r\n        if (geon.mouseLeftPressed) {\r\n            let prev = this.vectors[this.vectors.length - 1];\r\n            let add = Vector2.fromCopy(geon.mouse);\r\n            this.vectors.push(add);\r\n            this.lines.push(new Line2(prev, add));\r\n        }\r\n        // move all vectors\r\n        let vel = this.getMovementVector(geon, 2, 5);\r\n        this.vectors.forEach(v => v.add(vel));\r\n    }\r\n    draw(geon) {\r\n        this.vectors.forEach(p => geon.r.point(p.x, p.y));\r\n        this.lines.forEach(l => geon.r.line(l));\r\n    }\r\n    // ...\r\n    getMovementVector(geon, minspeed, maxspeed) {\r\n        let speed = minspeed;\r\n        let velocity = new Vector2(0, 0);\r\n        if (geon.IsKeyDown("shift"))\r\n            speed = maxspeed;\r\n        if (geon.IsKeyDown("arrowup") || geon.IsKeyDown("w"))\r\n            velocity.add(new Vector2(0, 1));\r\n        if (geon.IsKeyDown("arrowdown") || geon.IsKeyDown("s"))\r\n            velocity.add(new Vector2(0, -1));\r\n        if (geon.IsKeyDown("arrowleft") || geon.IsKeyDown("a"))\r\n            velocity.add(new Vector2(1, 0));\r\n        if (geon.IsKeyDown("arrowright") || geon.IsKeyDown("d"))\r\n            velocity.add(new Vector2(-1, 0));\r\n        return velocity.setLength(speed);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\nconst programs = [\r\n    BounceBallsProgram,\r\n    VoronoiProgram\r\n];\r\nconst meta = new SelectorMetaProgram(programs);\r\nconst canvas = document.getElementById("canvas");\r\nconst geon = new Geon(canvas);\r\ngeon.loadMeta(meta); // program selector\r\ngeon.load(new VoronoiProgram()); // first program to load \r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///399\n')})();