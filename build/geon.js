(()=>{"use strict";eval('\n// CONCATENATED MODULE: ./src/2D/Renderer2.ts\n// author: Jos Feenstra\r\n// only renderer talks to ctx & canvas.\r\n// do all the camera work in here\r\nclass Renderer2 {\r\n    constructor(canvas, geon) {\r\n        // visuals\r\n        this.pointsize = 5;\r\n        this.pointcolor = "#ffffff";\r\n        this.linecolor = "#ffffff";\r\n        this.fillcolor = "#666666";\r\n        this.geon = geon;\r\n        this.ctx = canvas.getContext("2d");\r\n        this.ctx.fillStyle = this.pointcolor;\r\n        this.ctx.strokeStyle = this.linecolor;\r\n    }\r\n    // this clears with a transparant layer, for easy delayed effect\r\n    clearFade(alpha) {\r\n        // adjust color settings\r\n        const color = this.ctx.fillStyle;\r\n        this.ctx.fillStyle = "#000000ff";\r\n        this.ctx.globalAlpha = alpha;\r\n        this.ctx.fillRect(0, 0, this.geon.width, this.geon.height);\r\n        // reset color settings \r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.fillStyle = color;\r\n    }\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.geon.width, this.geon.height);\r\n    }\r\n    point(x, y) {\r\n        // todo camera\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.pointsize, 0, Math.PI * 2, false);\r\n        this.ctx.fill();\r\n    }\r\n    points(points) {\r\n        // TODO dont draw if off screen\r\n        for (let i = 0; i < points.length; i++) {\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(points[i].x, points[i].y, this.pointsize, 0, Math.PI * 2, false);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    line(line) {\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(line.from.x, line.from.y);\r\n        this.ctx.lineTo(line.to.x, line.to.y);\r\n        this.ctx.stroke();\r\n    }\r\n    lineSegments(vertices) {\r\n        this.ctx.beginPath();\r\n        for (let i = 0; i < vertices.length; i += 2) {\r\n            let ii = i + 1;\r\n            this.ctx.moveTo(vertices[i].x, vertices[i].y);\r\n            this.ctx.lineTo(vertices[ii].x, vertices[ii].y);\r\n        }\r\n        this.ctx.stroke();\r\n    }\r\n    circle() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    rectangle() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    polygon() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/math/Vector2.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.00001)\r\n            d = 1;\r\n        let x = (asum * (b.y - c.y) + bsum * (c.y - a.y) + csum * (a.y - b.y)) / d;\r\n        let y = (asum * (b.x - c.x) + bsum * (c.x - a.x) + csum * (a.x - b.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Geon.ts\n\r\n\r\nclass Geon {\r\n    constructor(canvas) {\r\n        this.looping = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.mouse = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        // window\r\n        this.canvas = canvas;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n        this.setWindow();\r\n        // window.onresize = this.setWindow;\r\n        // rendering\r\n        this.r = new Renderer2(canvas, this);\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        // mouse\r\n        canvas.onmousemove = this.setMousePos.bind(this);\r\n        canvas.onmousedown = this.setMouseDown.bind(this);\r\n        canvas.onmouseup = this.setMouseUp.bind(this);\r\n        canvas.oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation(); // no menu\r\n        };\r\n        // keyboard\r\n        canvas.setAttribute("tabindex", \'0\');\r\n        canvas.onkeydown = this.onKeyDown.bind(this);\r\n        canvas.onkeypress = this.onKeyPressed.bind(this);\r\n        canvas.onkeyup = this.onKeyUp.bind(this);\r\n        for (let i = 0; i < 223; i++) {\r\n            this.keysDown[i] = false;\r\n        }\r\n    }\r\n    // ...\r\n    load(game) {\r\n        this.program = game;\r\n        game.start(this);\r\n        if (!this.looping)\r\n            this.loop();\r\n    }\r\n    loadMeta(program) {\r\n        this.meta = program;\r\n        program.start(this);\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    // ...\r\n    loop() {\r\n        this.looping = true;\r\n        function step() {\r\n            var _a, _b;\r\n            // update time\r\n            this.newTime = Date.now();\r\n            this.tick += (this.newTime - this.oldTime);\r\n            this.oldTime = this.newTime;\r\n            // update mouse\r\n            this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n            this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n            this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n            this.mouseLeftPrev = this.mouseLeftDown;\r\n            this.mouseRightPrev = this.mouseRightDown;\r\n            this.mouseMiddlePrev = this.mouseMiddleDown;\r\n            // TODO : dont update if nothing moved (?)\r\n            this.program.update(this);\r\n            this.r.clear();\r\n            this.program.draw(this);\r\n            // update metaprogram afterwards\r\n            (_a = this.meta) === null || _a === void 0 ? void 0 : _a.update(this);\r\n            (_b = this.meta) === null || _b === void 0 ? void 0 : _b.draw(this);\r\n            // refresh keypresses\r\n            this.keysPressed = [];\r\n            // Call the game loop\r\n            window.requestAnimationFrame(step.bind(this));\r\n        }\r\n        window.requestAnimationFrame(step.bind(this));\r\n    }\r\n    setMousePos(e) {\r\n        this.mouse = new Vector2(e.clientX, e.clientY);\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n    }\r\n    setWindow() {\r\n        console.log("setting window...");\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n        this.canvas.style.width = this.canvas.width + "px";\r\n        this.canvas.style.height = this.canvas.height + "px";\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n    }\r\n}\r\n// export enum Key\r\n// {\r\n//     keyleft = 37,\r\n//     keyup = 38,\r\n//     keyright = 39,\r\n//     keydown = 40,\r\n//     key0 = 48,\r\n//     key1 = 49,\r\n//     key2 = 50,\r\n//     key3 = 51,\r\n//     key4 = 52,\r\n//     key5 = 53,\r\n//     key6 = 54,\r\n//     key7 = 55,\r\n//     key8 = 56,\r\n//     key9 = 57,\r\n// }\r\n\n// CONCATENATED MODULE: ./src/programs/Program.ts\nclass Program {\r\n    start(geon) {\r\n        //  init geometry \r\n    }\r\n    update(geon) {\r\n        // update geometry\r\n    }\r\n    draw(geon) {\r\n        // draw geometry\r\n    }\r\n    exit(geon) {\r\n        // deallocate ? clean?\r\n    }\r\n}\r\n// just a flag for now\r\nclass MetaProgram extends Program {\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Selector.ts\n\r\n// metaprogram\r\nclass SelectorMetaProgram extends MetaProgram {\r\n    constructor(programs) {\r\n        super();\r\n        this.current = 0;\r\n        this.isAnimating = false;\r\n        this.animationCounter = 1;\r\n        this.comeback = false;\r\n        this.programs = programs;\r\n        if (this.programs.length == 0)\r\n            throw "Need at least 1 program!";\r\n    }\r\n    start(geon) {\r\n        this.programs[this.current];\r\n    }\r\n    update(geon) {\r\n        // listen for keypresses \r\n        // stupid i know. More specific listening would be better.\r\n        for (let i = 1; i < 10; i++) {\r\n            if (geon.IsKeyPressed(i.toString())) {\r\n                this.prepareSwapProgram(i - 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        const speed = 0.015;\r\n        if (this.isAnimating) {\r\n            if (this.animationCounter > 1) {\r\n                this.isAnimating = false;\r\n            }\r\n            geon.r.clearFade(1 - this.animationCounter);\r\n            if (this.animationCounter > 0) {\r\n                if (this.comeback)\r\n                    this.animationCounter += speed;\r\n                else\r\n                    this.animationCounter -= speed;\r\n            }\r\n            else {\r\n                this.animationCounter += 0.01;\r\n                this.comeback = true;\r\n                this.swapProgram(geon);\r\n            }\r\n        }\r\n        // draw transitions\r\n    }\r\n    prepareSwapProgram(num) {\r\n        if (num < 0 || num >= this.programs.length) {\r\n            console.log("no program [" + num.toString() + "].");\r\n            return;\r\n        }\r\n        console.log("swapping to program " + num.toString());\r\n        // prepare for animation\r\n        this.current = num;\r\n        this.isAnimating = true;\r\n        this.comeback = false;\r\n        this.animationCounter = 1;\r\n        // load\r\n        // fade in\r\n    }\r\n    swapProgram(geon) {\r\n        geon.load(new this.programs[this.current]());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/BounceBalls.ts\n\r\n\r\nclass BounceBallsProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.points = [];\r\n        this.vectors = [];\r\n        this.count = 100;\r\n        this.speed = 2;\r\n    }\r\n    start(geon) {\r\n        this.points = new Array(this.count);\r\n        this.vectors = new Array(this.count);\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.points[i] = Vector2.fromRandom().mul(geon.bounds);\r\n            this.vectors[i] = Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize();\r\n        }\r\n        console.log("created a bunch of points");\r\n    }\r\n    update(geon) {\r\n        for (let i = 0; i < this.count; i++) {\r\n            let p = this.points[i];\r\n            let v = this.vectors[i];\r\n            if (geon.mouseLeftDown) {\r\n                // disrupt the vector, based on how closeby the mouse is\r\n                let dir = Vector2.from2Pt(p, geon.mouse);\r\n                let length = dir.length();\r\n                dir.normalize().scale(Math.min(4, 100 / length));\r\n                v.add(dir);\r\n            }\r\n            p.add(v);\r\n            let length = v.length();\r\n            if (length > this.speed) {\r\n                v.setLength(length * 0.99);\r\n            }\r\n            // bounce at edge\r\n            if (p.x < 0 || p.x > geon.bounds.x)\r\n                v.x = -v.x;\r\n            if (p.y < 0 || p.y > geon.bounds.y)\r\n                v.y = -v.y;\r\n        }\r\n        // if mouse is nearby, move away from it\r\n        if (geon.mouseRightPressed) {\r\n            for (let i = 0; i < 100; i++) {\r\n                this.count += 1;\r\n                this.points.push(Vector2.fromRandom().mul(geon.bounds));\r\n                this.vectors.push(Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize());\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        this.points.forEach(p => geon.r.point(p.x, p.y));\r\n        // draw at mouse position;\r\n        if (geon.mouseLeftDown) {\r\n            geon.r.point(geon.mouse.x, geon.mouse.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/2D/Delaunay.ts\n// author : Jos Feenstra\r\n// TODO: extend from a generic triangulation? might be nice to have\r\n\r\nclass Delaunay {\r\n    constructor() {\r\n        // ... Util\r\n        // store the last triangle\r\n        this.walkCursor = 0;\r\n        this.vts = [];\r\n        this.t = [];\r\n        // init big base triangle\r\n        this.vts.push(new Vector2(-10000, -10000));\r\n        this.vts.push(new Vector2(10000, -10000));\r\n        this.vts.push(new Vector2(0, 10000));\r\n        this.t.push([0, 1, 2, -1, -1, -1]);\r\n    }\r\n    // ... Getters \r\n    getVertices() {\r\n        return this.vts;\r\n    }\r\n    getEdges() {\r\n        let edges = [];\r\n        for (let tr of this.t) {\r\n            let a = this.vts[tr[0]];\r\n            let b = this.vts[tr[1]];\r\n            let c = this.vts[tr[2]];\r\n            edges.push(a);\r\n            edges.push(b);\r\n            edges.push(a);\r\n            edges.push(c);\r\n            edges.push(b);\r\n            edges.push(c);\r\n        }\r\n        return edges;\r\n    }\r\n    getVoronoiEdges() {\r\n        let edges = [];\r\n        let circumcenters = this.t.map(tr => Vector2.fromCircumcenter(this.vts[tr[0]], this.vts[tr[1]], this.vts[tr[2]]));\r\n        // per nb relation : if its not -1 : build an edge between nb cc\'s. \r\n        for (let i = 0; i < this.t.length; i++) {\r\n            let triangle = this.t[i];\r\n            for (let ii = 3; ii < 6; ii++) {\r\n                let nb = triangle[ii];\r\n                if (nb == -1)\r\n                    continue;\r\n                edges.push(circumcenters[i]);\r\n                edges.push(circumcenters[nb]);\r\n            }\r\n        }\r\n        return edges;\r\n    }\r\n    // ... Interface\r\n    Insert(insertion) {\r\n        // dont insert if too similar to existing \r\n        if (this.vts.some(v => insertion.roughlyEquals(v, 0.1))) {\r\n            console.log("to close to existing point");\r\n            return;\r\n        }\r\n        // add it\r\n        const inID = this.vts.length;\r\n        this.vts.push(insertion);\r\n        // get triangle and ID values\r\n        const trID = this.selectTriangle(insertion);\r\n        if (trID == -1) {\r\n            console.log("triangle walk failed");\r\n            return;\r\n        }\r\n        const tr = this.t[trID];\r\n        const original_a_ID = tr[0];\r\n        const original_b_ID = tr[1];\r\n        const original_c_ID = tr[2];\r\n        const original_bcID = tr[3];\r\n        const original_caID = tr[4];\r\n        const original_abID = tr[5];\r\n        const abID = trID;\r\n        const bcID = this.t.length;\r\n        const caID = this.t.length + 1;\r\n        // edit 1 triangle, add 2 new ones \r\n        this.t[trID] = [original_a_ID, original_b_ID, inID, bcID, caID, original_abID];\r\n        this.t.push([original_b_ID, original_c_ID, inID, caID, abID, original_bcID]);\r\n        this.t.push([original_c_ID, original_a_ID, inID, abID, bcID, original_caID]);\r\n        // fix topology\r\n        this.replaceNeighbor(original_bcID, trID, bcID);\r\n        this.replaceNeighbor(original_caID, trID, caID);\r\n        this.flipCorrection([abID, bcID, caID], inID);\r\n    }\r\n    selectTriangle(target) {\r\n        // select a triangle based on a walking triangle algorithm\r\n        const combinations = [[0, 1, 2], [1, 2, 0], [2, 0, 1]];\r\n        let trID = this.walkCursor;\r\n        for (let _ = 0; _ < this.t.length; _++) {\r\n            for (let c of combinations) {\r\n                let sign = Vector2.getSign(target, this.vts[this.t[trID][c[0]]], this.vts[this.t[trID][c[1]]]);\r\n                if (sign < 0) {\r\n                    trID = this.getNeighborTriangle(trID, this.t[trID][c[2]]);\r\n                    break;\r\n                }\r\n                if (c[0] == 2) {\r\n                    this.walkCursor = trID;\r\n                    return trID;\r\n                }\r\n            }\r\n        }\r\n        // too many steps have been taken\r\n        return -1;\r\n    }\r\n    flipCorrection(tr_IDS, inID) {\r\n        // flip until graph is delaunay\r\n    }\r\n    // ... Helpers\r\n    replaceNeighbor(trID, nbOld, nbNew) {\r\n        // there are prettier ways, but this is fast\r\n        if (trID == -1)\r\n            return;\r\n        if (this.t[trID][3] == nbOld)\r\n            this.t[trID][3] = nbNew;\r\n        else if (this.t[trID][4] == nbOld)\r\n            this.t[trID][4] = nbNew;\r\n        else if (this.t[trID][5] == nbOld)\r\n            this.t[trID][5] = nbNew;\r\n        else\r\n            console.log("replace neighbor failed!");\r\n    }\r\n    getNeighborTriangle(triangleID, pointID) {\r\n        let index = this.t[triangleID].indexOf(pointID) + 3;\r\n        return this.t[triangleID][index];\r\n    }\r\n    getNeighborPoint(triangleID, neighborID) {\r\n        let index = this.t[triangleID].indexOf(neighborID) - 3;\r\n        return this.t[triangleID][index];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/ProgramHelpers.ts\n\r\nclass ProgramHelpers {\r\n    static getMovementVector(geon, minspeed, maxspeed) {\r\n        let speed = minspeed;\r\n        let velocity = new Vector2(0, 0);\r\n        if (geon.IsKeyDown("shift"))\r\n            speed = maxspeed;\r\n        if (geon.IsKeyDown("arrowup") || geon.IsKeyDown("w"))\r\n            velocity.add(new Vector2(0, 1));\r\n        if (geon.IsKeyDown("arrowdown") || geon.IsKeyDown("s"))\r\n            velocity.add(new Vector2(0, -1));\r\n        if (geon.IsKeyDown("arrowleft") || geon.IsKeyDown("a"))\r\n            velocity.add(new Vector2(1, 0));\r\n        if (geon.IsKeyDown("arrowright") || geon.IsKeyDown("d"))\r\n            velocity.add(new Vector2(-1, 0));\r\n        return velocity.setLength(speed);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/voronoiProgram.ts\n\r\n\r\n\r\n\r\nclass VoronoiProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.dt = new Delaunay();\r\n        this.switch = 0;\r\n    }\r\n    start(geon) {\r\n        this.dt.Insert(new Vector2(geon.width / 2, geon.height / 2));\r\n    }\r\n    update(geon) {\r\n        if (geon.mouseRightPressed) {\r\n            let insertion = Vector2.fromCopy(geon.mouse);\r\n            this.dt.Insert(insertion);\r\n        }\r\n        if (geon.IsKeyPressed(\'h\')) {\r\n            this.switch += 1;\r\n            if (this.switch > 2)\r\n                this.switch = 0;\r\n        }\r\n        // move all vectors\r\n        let vel = ProgramHelpers.getMovementVector(geon, 2, 5);\r\n    }\r\n    draw(geon) {\r\n        geon.r.points(this.dt.getVertices());\r\n        if (this.switch == 1)\r\n            geon.r.lineSegments(this.dt.getEdges());\r\n        else if (this.switch == 2)\r\n            geon.r.lineSegments(this.dt.getVoronoiEdges());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\nconst programs = [\r\n    BounceBallsProgram,\r\n    VoronoiProgram\r\n];\r\nconst meta = new SelectorMetaProgram(programs);\r\nconst canvas = document.getElementById("canvas");\r\nconst geon = new Geon(canvas);\r\ngeon.loadMeta(meta); // program selector\r\ngeon.load(new VoronoiProgram()); // first program to load \r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLy4vc3JjLzJEL1JlbmRlcmVyMi50cz8wYjc4Iiwid2VicGFjazovL2dlb24vLi9zcmMvbWF0aC9WZWN0b3IyLnRzP2FjZWQiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9HZW9uLnRzP2E3NGQiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy9Qcm9ncmFtLnRzPzFiMWIiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy9TZWxlY3Rvci50cz82YjgyIiwid2VicGFjazovL2dlb24vLi9zcmMvcHJvZ3JhbXMvQm91bmNlQmFsbHMudHM/YTMxNCIsIndlYnBhY2s6Ly9nZW9uLy4vc3JjLzJEL0RlbGF1bmF5LnRzPzIwZTYiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy9Qcm9ncmFtSGVscGVycy50cz84ZTE0Iiwid2VicGFjazovL2dlb24vLi9zcmMvcHJvZ3JhbXMvdm9yb25vaVByb2dyYW0udHM/YjA3OSIsIndlYnBhY2s6Ly9nZW9uLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1QkFBdUI7QUFNdkIsdUNBQXVDO0FBQ3ZDLGlDQUFpQztBQUMxQixNQUFNLFNBQVM7SUFZbEIsWUFBWSxNQUF5QixFQUFFLElBQVU7UUFQakQsVUFBVTtRQUNGLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxlQUFVLEdBQUcsU0FBUyxDQUFDO1FBRXZCLGNBQVMsR0FBRyxTQUFTLENBQUM7UUFDdEIsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUkxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJ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QUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxJQUFJLENBQUMsSUFBVTtRQUVYLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUVyQyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQztZQUNoQixJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7YUFDdkMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSjs7O0FDOUM2QjtBQUU0QjtBQUVFO0FBQ0Q7QUFFM0QsTUFBTSxRQUFRLEdBQ2Q7SUFDSSxrQkFBa0I7SUFDbEIsY0FBYztDQUNqQixDQUFDO0FBQ0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQyxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBdUIsQ0FBQztBQUN2RSxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQWEsbUJBQW1CO0FBQ3BELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMseUJBQXlCIiwiZmlsZSI6IjQzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogSm9zIEZlZW5zdHJhXHJcblxyXG5pbXBvcnQgeyBMaW5lMiB9IGZyb20gXCIuLi9nZW8yL2xpbmUyXCI7XHJcbmltcG9ydCB7IEdlb24gfSBmcm9tIFwiLi4vR2VvblwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL21hdGgvVmVjdG9yMlwiO1xyXG5cclxuLy8gb25seSByZW5kZXJlciB0YWxrcyB0byBjdHggJiBjYW52YXMuXHJcbi8vIGRvIGFsbCB0aGUgY2FtZXJhIHdvcmsgaW4gaGVyZVxyXG5leHBvcnQgY2xhc3MgUmVuZGVyZXIyXHJcbntcclxuICAgIHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcbiAgICBwcml2YXRlIGdlb246IEdlb247XHJcblxyXG4gICAgLy8gdmlzdWFsc1xyXG4gICAgcHJpdmF0ZSBwb2ludHNpemUgPSA1O1xyXG4gICAgcHJpdmF0ZSBwb2ludGNvbG9yID0gXCIjZmZmZmZmXCI7XHJcblxyXG4gICAgcHJpdmF0ZSBsaW5lY29sb3IgPSBcIiNmZmZmZmZcIjtcclxuICAgIHByaXZhdGUgZmlsbGNvbG9yID0gXCIjNjY2NjY2XCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZ2VvbjogR2VvbilcclxuICAgIHtcclxuICAgICAgICB0aGlzLmdlb24gPSBnZW9uO1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSE7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5wb2ludGNvbG9yO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5saW5lY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhpcyBjbGVhcnMgd2l0aCBhIHRyYW5zcGFyYW50IGxheWVyLCBmb3IgZWFzeSBkZWxheWVkIGVmZmVjdFxyXG4gICAgY2xlYXJGYWRlKGFscGhhOiBudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gYWRqdXN0IGNvbG9yIHNldHRpbmdzXHJcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLmN0eC5maWxsU3R5bGU7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gXCIjMDAwMDAwZmZcIjtcclxuICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IGFscGhhOyAgXHJcblxyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMuZ2Vvbi53aWR0aCwgdGhpcy5nZW9uLmhlaWdodCk7XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IGNvbG9yIHNldHRpbmdzIFxyXG4gICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gMTsgIFxyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5nZW9uLndpZHRoLCB0aGlzLmdlb24uaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludCh4OiBudW1iZXIsIHk6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvLyB0b2RvIGNhbWVyYVxyXG4gICAgICAgIC8vIFRPRE8gZG9udCBkcmF3IGlmIG9mZiBzY3JlZW5cclxuXHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguYXJjKHgsIHksIHRoaXMucG9pbnRzaXplLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludHMocG9pbnRzOiBWZWN0b3IyW10pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gVE9ETyBkb250IGRyYXcgaWYgb2ZmIHNjcmVlblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmFyYyhwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnksIHRoaXMucG9pbnRzaXplLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuXHJcbiAgICBsaW5lKGxpbmU6IExpbmUyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIFRPRE8gZG9udCBkcmF3IGlmIG9mZiBzY3JlZW5cclxuXHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHgubW92ZVRvKGxpbmUuZnJvbS54LCBsaW5lLmZyb20ueSk7XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKGxpbmUudG8ueCwgbGluZS50by55KTtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBsaW5lU2VnbWVudHModmVydGljZXM6IFZlY3RvcjJbXSlcclxuICAgIHtcclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwIDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSArPSAyKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGlpID0gaSArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh2ZXJ0aWNlc1tpXS54LCB2ZXJ0aWNlc1tpXS55KTtcclxuICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHZlcnRpY2VzW2lpXS54LCB2ZXJ0aWNlc1tpaV0ueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNpcmNsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfSBcclxuXHJcbiAgICByZWN0YW5nbGUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwb2x5Z29uKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59IiwiLy8gYXV0aG9yOiBKb3MgRmVlbnN0cmFcclxuLy8gaW5zcGlyYXRpb24gZnJvbSBUaHJlZS5qc1xyXG4vLyBub3RlOiByZWN5Y2xlIHRoZSBjbGFzcyBhcyBtdWNoIGFzIHBvc3NibGUsIGJ1aWxkaW5nIGEgbmV3IGNsYXNzIGlzIGV4cGVuc2l2ZSxcclxuLy8gZXNwZWNpYWxseSBpbiBqYXZhc2NyaXB0XHJcblxyXG5leHBvcnQgY2xhc3MgVmVjdG9yMlxyXG57XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3Rvcih4IDogbnVtYmVyLCB5IDogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxuXHJcblx0Ly8gLS0tIGZhY3RvcmllcyAmIG90aGVyIHN0YXRpY3NcclxuXHJcblx0c3RhdGljIGZyb21MZXJwKCB2MTpWZWN0b3IyLCB2MjpWZWN0b3IyLCBhbHBoYTpudW1iZXIgKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0cmV0dXJuIG5ldyBWZWN0b3IyKFxyXG5cdFx0XHR2MS54ICsgKCB2Mi54IC0gdjEueCApICogYWxwaGEsXHJcblx0XHRcdHYxLnkgKyAoIHYyLnkgLSB2MS55ICkgKiBhbHBoYVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG4gICAgc3RhdGljIGZyb21SYW5kb20oKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoXHJcblx0XHQgICAgTWF0aC5yYW5kb20oKSxcclxuXHRcdCAgICBNYXRoLnJhbmRvbSgpXHJcbiAgICAgICAgKVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb20yUHQoZnJvbTogVmVjdG9yMiwgdG86IFZlY3RvcjIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgVmVjdG9yMihcclxuXHRcdFx0ZnJvbS54IC0gdG8ueCxcclxuXHRcdFx0ZnJvbS55IC0gdG8ueVxyXG5cdFx0KVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGZyb21Db3B5KG90aGVyOiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy56ZXJvKCkuY29weShvdGhlcik7XHRcclxuXHR9XHJcblxyXG5cdHN0YXRpYyB6ZXJvKCkgeyByZXR1cm4gbmV3IFZlY3RvcjIoMCwgMCk7IH1cclxuXHJcblxyXG5cdHN0YXRpYyBmcm9tQ2lyY3VtY2VudGVyKGE6IFZlY3RvcjIsIGI6IFZlY3RvcjIsIGM6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGFzdW0gPSBhLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGJzdW0gPSBiLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGNzdW0gPSBjLnNxdWFyZVN1bSgpO1xyXG5cclxuICAgICAgICAvLyBzb3J0IG9mIGNyb3NzIHByb2R1Y3RcclxuICAgICAgICBsZXQgZCA9IDIgKiAoYS54ICogKGIueSAtIGMueSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICBiLnggKiAoYy55IC0gYS55KSArIFxyXG4gICAgICAgICAgICAgICAgICAgICBjLnggKiAoYS55IC0gYi55KSk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoaXMgdHJpYW5nbGUgaGFzIG5vIGNpcmN1bWNlbnRlcj8gXHJcbiAgICAgICAgaWYgKGQgPCAwLjAwMDAxKVxyXG4gICAgICAgICAgICBkID0gMTsgXHJcblxyXG4gICAgICAgIGxldCB4ID0gKGFzdW0gKiAoYi55IC0gYy55KSArIGJzdW0gKiAoYy55IC0gYS55KSArIGNzdW0gKiAoYS55IC0gYi55KSkgLyBkO1xyXG4gICAgICAgIGxldCB5ID0gKGFzdW0gKiAoYi54IC0gYy54KSArIGJzdW0gKiAoYy54IC0gYS54KSArIGNzdW0gKiAoYS54IC0gYi54KSkgLyBkO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCx5KTtcclxuICAgIH1cclxuXHJcblx0c3RhdGljIGdldFNpZ24oYTpWZWN0b3IyLCBiOlZlY3RvcjIgLCBjOlZlY3RvcjIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0Ly8gdGVzdCBoYWxmIHBsYW5lIHJlbGF0aW9uc2hpcFxyXG5cdFx0Ly8gPDAgOiBwb2ludCBvbiBmaXJzdCBoYWxmXHJcblx0XHQvLyAwICA6IHBvaW50cyBjb2xsaW5lYXJcclxuXHRcdC8vID4wIDogcG9pbnQgb24gc2Vjb25kIGhhbGYgXHJcblx0XHRyZXR1cm4gKGEueCAtIGMueCkgKiAoYi55IC0gYy55KSAtIFxyXG5cdFx0ICAgICAgIChiLnggLSBjLngpICogKGEueSAtIGMueSk7XHJcblx0fVxyXG5cclxuXHQvLyAtLS0gYmFzaWNzXHJcblxyXG5cdHNldCh4Om51bWJlciwgeTpudW1iZXIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHRoaXMueCA9IHg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cdFx0cmV0dXJuIHRoaXMgXHRcdFxyXG5cdH1cclxuXHJcblx0cm91Z2hseUVxdWFscyh2OiBWZWN0b3IyLCB0b2w6bnVtYmVyKSA6IGJvb2xlYW5cclxuXHR7XHJcblx0XHRyZXR1cm4gKE1hdGguYWJzKHRoaXMueCAtIHYueCkgPCB0b2wgJiYgXHJcblx0XHRcdFx0TWF0aC5hYnModGhpcy55IC0gdi55KSA8IHRvbClcclxuXHR9XHJcblxyXG5cdGVxdWFscyh2OlZlY3RvcjIpIDogYm9vbGVhblxyXG5cdHtcclxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgKTtcclxuXHR9XHJcblxyXG4gICAgdG9TdHJpbmcoKSA6IHN0cmluZ1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBgVmVjdG9yMygke3RoaXMueH0sICR7dGhpcy55fSlgO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCwgdGhpcy55KTtcclxuICAgIH1cclxuXHJcbiAgICBjb3B5KHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCA9IHYueDtcclxuICAgICAgICB0aGlzLnkgPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cdC8vIC0tLSBtYXRoXHJcblxyXG4gICAgYWRkKHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCArPSB2Lng7XHJcbiAgICAgICAgdGhpcy55ICs9IHYueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzdWIodjogVmVjdG9yMikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54IC09IHYueDtcclxuICAgICAgICB0aGlzLnkgLT0gdi55O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBtdWwodjogVmVjdG9yMikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ICo9IHYueDtcclxuICAgICAgICB0aGlzLnkgKj0gdi55O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHNjYWxlKHY6IG51bWJlcikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy54ICo9IHY7XHJcbiAgICAgICAgdGhpcy55ICo9IHY7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGl2KHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAvPSB2Lng7XHJcbiAgICAgICAgdGhpcy55IC89IHYueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBkaXZzY2FsZSh2OiBudW1iZXIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAvPSB2O1xyXG4gICAgICAgIHRoaXMueSAvPSB2O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIG1pbihvdGhlcjogVmVjdG9yMikgOiBWZWN0b3IyIFxyXG4gICAge1xyXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgb3RoZXIueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgb3RoZXIueSApO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRtYXgob3RoZXI6IFZlY3RvcjIpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCBvdGhlci54ICk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCBvdGhlci55ICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNsYW1wKG1pbjogVmVjdG9yMiwgbWF4OiBWZWN0b3IyKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KG1pbi54LCBNYXRoLm1pbihtYXgueCwgdGhpcy54KSk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heChtaW4ueSwgTWF0aC5taW4obWF4LnksIHRoaXMueSkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRjbGFtcFNjYWxhcihtaW5WYWw6bnVtYmVyLCBtYXhWYWw6bnVtYmVyKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4obWF4VmFsLCB0aGlzLngpKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy55KSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNsYW1wTGVuZ3RoKG1pbjpudW1iZXIsIG1heDpudW1iZXIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XHJcblx0XHRyZXR1cm4gdGhpcy5kaXZzY2FsZSggbGVuZ3RoIHx8IDEgKS5zY2FsZSggTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIGxlbmd0aCkpKTtcclxuXHR9XHJcblxyXG5cdGZsb29yKCkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGguZmxvb3IodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGguZmxvb3IodGhpcy55KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2VpbCgpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLmNlaWwodGhpcy54KTtcclxuXHRcdHRoaXMueSA9IE1hdGguY2VpbCh0aGlzLnkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRyb3VuZCgpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKHRoaXMueSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdHJvdW5kVG9aZXJvKCkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9ICh0aGlzLnggPCAwKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcclxuXHRcdHRoaXMueSA9ICh0aGlzLnkgPCAwKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0bmVnYXRlKCkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xyXG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGRvdCggdjpWZWN0b3IyICkgOiBudW1iZXIgXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcclxuXHR9XHJcblxyXG5cdGNyb3NzKCB2OlZlY3RvcjIgKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnkgLSB0aGlzLnkgKiB2Lng7IC8vID8/Pz9cclxuXHR9XHJcblxyXG5cdHNxdWFyZVN1bSgpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueTtcclxuXHR9XHJcblxyXG5cdGxlbmd0aCgpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG5cdH1cclxuXHJcblx0bWFuaGF0KCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xyXG5cdH1cclxuXHJcblx0bm9ybWFsaXplKCkgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuZGl2c2NhbGUoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xyXG5cdH1cclxuXHJcblx0YW5nbGUoKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXHJcblx0XHRjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoIC0gdGhpcy55LCAtIHRoaXMueCApICsgTWF0aC5QSTtcclxuXHRcdHJldHVybiBhbmdsZTtcclxuXHJcblx0fVxyXG5cclxuXHRkaXNUbyh2OiBWZWN0b3IyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLnNxcnQodGhpcy5kaXNUb1NxdWFyZWQodikpO1xyXG5cdH1cclxuXHJcblx0ZGlzVG9TcXVhcmVkKHY6IFZlY3RvcjIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0Y29uc3QgZHggPSB0aGlzLnggLSB2LngsIFxyXG5cdFx0XHQgIGR5ID0gdGhpcy55IC0gdi55O1xyXG5cdFx0cmV0dXJuIGR4ICogZHggKyBkeSAqIGR5O1xyXG5cdH1cclxuXHJcblx0ZGlzVG9NYW5oYXQodjogVmVjdG9yMikgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5hYnModGhpcy54IC0gdi54KSArIE1hdGguYWJzKHRoaXMueSAtIHYueSk7XHJcblx0fVxyXG5cclxuXHRzZXRMZW5ndGgobGVuZ3RoOiBudW1iZXIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLm5vcm1hbGl6ZSgpLnNjYWxlKGxlbmd0aCk7XHJcblx0fVxyXG5cclxuXHRsZXJwKG90aGVyOiBWZWN0b3IyLCBhbHBoYTpudW1iZXIpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHRoaXMueCArPSAoIG90aGVyLnggLSB0aGlzLnggKSAqIGFscGhhO1xyXG5cdFx0dGhpcy55ICs9ICggb3RoZXIueSAtIHRoaXMueSApICogYWxwaGE7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcbn0iLCJpbXBvcnQgeyBSZW5kZXJlcjIgfSBmcm9tICcuLzJEL1JlbmRlcmVyMic7XHJcbmltcG9ydCB7IFByb2dyYW0gfSBmcm9tICcuL3Byb2dyYW1zL1Byb2dyYW0nO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi9tYXRoL1ZlY3RvcjInO1xyXG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi9tYXRoL1ZlY3RvcjMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb25cclxue1xyXG4gICAgcHJvZ3JhbT86IFByb2dyYW07XHJcbiAgICBtZXRhPzogUHJvZ3JhbTtcclxuICAgIGxvb3Bpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICB0aWNrOiBudW1iZXI7XHJcbiAgICBvbGRUaW1lOiBudW1iZXI7XHJcbiAgICBuZXdUaW1lOiBudW1iZXI7XHJcbiAgICBcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIGJvdW5kczogVmVjdG9yMjtcclxuXHJcbiAgICBwcml2YXRlIGtleXNEb3duOiBJS2V5cyA9IHt9O1xyXG4gICAgcHJpdmF0ZSBrZXlzUHJlc3NlZDogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICBtb3VzZTogVmVjdG9yMiA9IFZlY3RvcjIuemVybygpO1xyXG4gICAgbW91c2VMZWZ0RG93bjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbW91c2VMZWZ0UHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBtb3VzZUxlZnRQcmV2OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgbW91c2VSaWdodERvd246IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIG1vdXNlUmlnaHRQcmVzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG1vdXNlUmlnaHRQcmV2OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgbW91c2VNaWRkbGVEb3duOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBtb3VzZU1pZGRsZVByZXNzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgbW91c2VNaWRkbGVQcmV2OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcjogUmVuZGVyZXIyXHJcblxyXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gd2luZG93XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuYm91bmRzID0gbmV3IFZlY3RvcjIodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpXHJcbiAgICAgICAgdGhpcy5zZXRXaW5kb3coKTtcclxuICAgICAgICAvLyB3aW5kb3cub25yZXNpemUgPSB0aGlzLnNldFdpbmRvdztcclxuXHJcbiAgICAgICAgLy8gcmVuZGVyaW5nXHJcbiAgICAgICAgdGhpcy5yID0gbmV3IFJlbmRlcmVyMihjYW52YXMsIHRoaXMpOyAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gdGltZVxyXG4gICAgICAgIHRoaXMudGljayA9IDA7XHJcbiAgICAgICAgdGhpcy5vbGRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLm5ld1RpbWUgPSB0aGlzLm9sZFRpbWU7XHJcblxyXG4gICAgICAgIC8vIG1vdXNlXHJcbiAgICAgICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gdGhpcy5zZXRNb3VzZVBvcy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IHRoaXMuc2V0TW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgICAgY2FudmFzLm9ubW91c2V1cCA9IHRoaXMuc2V0TW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbnZhcy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oZSkgeyBcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyBlLnN0b3BQcm9wYWdhdGlvbigpOyAvLyBubyBtZW51XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBrZXlib2FyZFxyXG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCAnMCcpO1xyXG4gICAgICAgIGNhbnZhcy5vbmtleWRvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbnZhcy5vbmtleXByZXNzID0gdGhpcy5vbktleVByZXNzZWQuYmluZCh0aGlzKTtcclxuICAgICAgICBjYW52YXMub25rZXl1cCA9IHRoaXMub25LZXlVcC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMjIzIDtpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmtleXNEb3duW2ldID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIC4uLlxyXG5cclxuICAgIHB1YmxpYyBsb2FkKGdhbWU6IFByb2dyYW0pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gZ2FtZTtcclxuICAgICAgICBnYW1lLnN0YXJ0KHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMubG9vcGluZylcclxuICAgICAgICAgICAgdGhpcy5sb29wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxvYWRNZXRhKHByb2dyYW06IFByb2dyYW0pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gcHJvZ3JhbTtcclxuICAgICAgICBwcm9ncmFtLnN0YXJ0KHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBJc0tleURvd24oa2V5OiBzdHJpbmcpIDogYm9vbGVhblxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmtleXNEb3duW2tleV07ICBcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgSXNLZXlQcmVzc2VkKGtleTogc3RyaW5nKSA6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXlzUHJlc3NlZC5pbmNsdWRlcyhrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIC4uLlxyXG5cclxuICAgIHByaXZhdGUgbG9vcCgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5sb29waW5nID0gdHJ1ZTtcclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHRoaXM6IEdlb24pIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIHRpbWVcclxuICAgICAgICAgICAgdGhpcy5uZXdUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdGhpcy50aWNrICs9ICh0aGlzLm5ld1RpbWUgLSB0aGlzLm9sZFRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLm9sZFRpbWUgPSB0aGlzLm5ld1RpbWU7XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgbW91c2VcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnRQcmVzc2VkID0gICh0aGlzLm1vdXNlTGVmdFByZXYgIT0gdGhpcy5tb3VzZUxlZnREb3duKSAmJiB0aGlzLm1vdXNlTGVmdERvd247XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VSaWdodFByZXNzZWQgPSAgKHRoaXMubW91c2VSaWdodFByZXYgIT0gdGhpcy5tb3VzZVJpZ2h0RG93bikgJiYgdGhpcy5tb3VzZVJpZ2h0RG93bjtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZVByZXNzZWQgPSAgKHRoaXMubW91c2VNaWRkbGVQcmV2ICE9IHRoaXMubW91c2VNaWRkbGVEb3duKSAmJiB0aGlzLm1vdXNlTWlkZGxlRG93bjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0UHJldiA9IHRoaXMubW91c2VMZWZ0RG93blxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlUmlnaHRQcmV2ID0gdGhpcy5tb3VzZVJpZ2h0RG93blxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlUHJldiA9IHRoaXMubW91c2VNaWRkbGVEb3duXHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPIDogZG9udCB1cGRhdGUgaWYgbm90aGluZyBtb3ZlZCAoPylcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmFtIS51cGRhdGUodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnIuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmFtIS5kcmF3KHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXBkYXRlIG1ldGFwcm9ncmFtIGFmdGVyd2FyZHNcclxuICAgICAgICAgICAgdGhpcy5tZXRhPy51cGRhdGUodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMubWV0YT8uZHJhdyh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlZnJlc2gga2V5cHJlc3Nlc1xyXG4gICAgICAgICAgICB0aGlzLmtleXNQcmVzc2VkID0gW107XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDYWxsIHRoZSBnYW1lIGxvb3BcclxuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRNb3VzZVBvcyhlOiBNb3VzZUV2ZW50KVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubW91c2UgPSBuZXcgVmVjdG9yMihlLmNsaWVudFgsIGUuY2xpZW50WSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRNb3VzZVVwKGU6IE1vdXNlRXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNvZGUgPSBlLmJ1dHRvbnM7XHJcbiAgICAgICAgaWYgKGNvZGUgPCA0KSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VNaWRkbGVEb3duID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2RlIDwgMikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlUmlnaHREb3duID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2RlIDwgMSkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlTGVmdERvd24gPSBmYWxzZTtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0TW91c2VEb3duKGU6IE1vdXNlRXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGNvZGUgPSBlLmJ1dHRvbnM7XHJcbiAgICAgICAgaWYgKGNvZGUgPj0gNCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb2RlIC09IDQ7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VNaWRkbGVEb3duID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvZGUgPj0gMikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb2RlIC09IDI7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VSaWdodERvd24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29kZSA+PSAxKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvZGUgLT0gMTtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duID0gdHJ1ZTtcclxuICAgICAgICB9ICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpXHJcbiAgICB7IFxyXG4gICAgICAgIGlmICh0aGlzLmtleXNEb3duW2Uua2V5XSA9PSB0cnVlKSByZXR1cm47XHJcbiAgICAgICAgY29uc29sZS5sb2coZS5rZXkpO1xyXG4gICAgICAgIHRoaXMua2V5c0Rvd25bZS5rZXkudG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMua2V5c1ByZXNzZWQucHVzaChlLmtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbktleVVwKGU6IEtleWJvYXJkRXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5rZXlzRG93bltlLmtleS50b0xvd2VyQ2FzZSgpXSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25LZXlQcmVzc2VkKGU6IEtleWJvYXJkRXZlbnQpXHJcbiAgICB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0V2luZG93KClcclxuICAgIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInNldHRpbmcgd2luZG93Li4uXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggID0gdGhpcy5jYW52YXMud2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0ICsgXCJweFwiO1xyXG5cclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBuZXcgVmVjdG9yMih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUtleXMgXHJcbntcclxuICAgIFtrZXk6IHN0cmluZ10gOiBib29sZWFuXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBlbnVtIEtleVxyXG4vLyB7XHJcbi8vICAgICBrZXlsZWZ0ID0gMzcsXHJcbi8vICAgICBrZXl1cCA9IDM4LFxyXG4vLyAgICAga2V5cmlnaHQgPSAzOSxcclxuLy8gICAgIGtleWRvd24gPSA0MCxcclxuLy8gICAgIGtleTAgPSA0OCxcclxuLy8gICAgIGtleTEgPSA0OSxcclxuLy8gICAgIGtleTIgPSA1MCxcclxuLy8gICAgIGtleTMgPSA1MSxcclxuLy8gICAgIGtleTQgPSA1MixcclxuLy8gICAgIGtleTUgPSA1MyxcclxuLy8gICAgIGtleTYgPSA1NCxcclxuLy8gICAgIGtleTcgPSA1NSxcclxuLy8gICAgIGtleTggPSA1NixcclxuLy8gICAgIGtleTkgPSA1NyxcclxuLy8gfVxyXG4iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmFtXHJcbntcclxuICAgIHN0YXJ0KGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gIGluaXQgZ2VvbWV0cnkgXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gdXBkYXRlIGdlb21ldHJ5XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGRyYXcgZ2VvbWV0cnlcclxuICAgIH1cclxuXHJcbiAgICBleGl0KGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZGVhbGxvY2F0ZSA/IGNsZWFuP1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBqdXN0IGEgZmxhZyBmb3Igbm93XHJcbmV4cG9ydCBjbGFzcyBNZXRhUHJvZ3JhbSBleHRlbmRzIFByb2dyYW1cclxue1xyXG5cclxufSIsImltcG9ydCB7IEdlb24gfSBmcm9tIFwiLi4vR2VvblwiO1xyXG5pbXBvcnQgeyBNZXRhUHJvZ3JhbSwgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgTGluZTIgfSBmcm9tIFwiLi4vZ2VvMi9saW5lMlwiO1xyXG5cclxuLy8gbWV0YXByb2dyYW1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3Rvck1ldGFQcm9ncmFtIGV4dGVuZHMgTWV0YVByb2dyYW1cclxue1xyXG4gICAgcHJvZ3JhbXM6IGFueVtdO1xyXG4gICAgY3VycmVudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBpc0FuaW1hdGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgYW5pbWF0aW9uQ291bnRlciA9IDE7XHJcbiAgICBjb21lYmFjayA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb2dyYW1zOiBhbnlbXSlcclxuICAgIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcclxuICAgICAgICBpZiAodGhpcy5wcm9ncmFtcy5sZW5ndGggPT0gMCkgdGhyb3cgXCJOZWVkIGF0IGxlYXN0IDEgcHJvZ3JhbSFcIjtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydChnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbXNbdGhpcy5jdXJyZW50XVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGxpc3RlbiBmb3Iga2V5cHJlc3NlcyBcclxuICAgICAgICAvLyBzdHVwaWQgaSBrbm93LiBNb3JlIHNwZWNpZmljIGxpc3RlbmluZyB3b3VsZCBiZSBiZXR0ZXIuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGdlb24uSXNLZXlQcmVzc2VkKGkudG9TdHJpbmcoKSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVN3YXBQcm9ncmFtKGkgLSAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2VvbjogR2VvbilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzcGVlZCA9IDAuMDE1O1xyXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW5nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uQ291bnRlciA+IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZW9uLnIuY2xlYXJGYWRlKDEgLSB0aGlzLmFuaW1hdGlvbkNvdW50ZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25Db3VudGVyID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tZWJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db3VudGVyICs9IHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvdW50ZXIgLT0gc3BlZWQ7XHJcbiAgICAgICAgICAgIH0gICBcclxuICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db3VudGVyICs9IDAuMDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWViYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dhcFByb2dyYW0oZ2Vvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBkcmF3IHRyYW5zaXRpb25zXHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZVN3YXBQcm9ncmFtKG51bTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChudW0gPCAwIHx8IG51bSA+PSB0aGlzLnByb2dyYW1zLmxlbmd0aCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIHByb2dyYW0gW1wiICsgbnVtLnRvU3RyaW5nKCkgKyBcIl0uXCIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9ICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3dhcHBpbmcgdG8gcHJvZ3JhbSBcIiArIG51bS50b1N0cmluZygpKTsgIFxyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIGZvciBhbmltYXRpb25cclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudW07XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb21lYmFjayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uQ291bnRlciA9IDE7XHJcblxyXG4gICAgICAgIC8vIGxvYWRcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy8gZmFkZSBpblxyXG4gICAgfVxyXG5cclxuICAgIHN3YXBQcm9ncmFtKGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgZ2Vvbi5sb2FkKG5ldyB0aGlzLnByb2dyYW1zW3RoaXMuY3VycmVudF0oKSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCb3VuY2VCYWxsc1Byb2dyYW0gZXh0ZW5kcyBQcm9ncmFtXHJcbntcclxuICAgIHBvaW50czogVmVjdG9yMltdID0gW107XHJcbiAgICB2ZWN0b3JzOiBWZWN0b3IyW10gPSBbXTtcclxuXHJcbiAgICBjb3VudCA9IDEwMDtcclxuICAgIHNwZWVkID0gMjtcclxuXHJcbiAgICBzdGFydChnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5KHRoaXMuY291bnQpO1xyXG4gICAgICAgIHRoaXMudmVjdG9ycyA9IG5ldyBBcnJheSh0aGlzLmNvdW50KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50c1tpXSA9IFZlY3RvcjIuZnJvbVJhbmRvbSgpLm11bChnZW9uLmJvdW5kcyk7XHJcbiAgICAgICAgICAgIHRoaXMudmVjdG9yc1tpXSA9IFZlY3RvcjIuZnJvbVJhbmRvbSgpLnN1YihuZXcgVmVjdG9yMigwLjUsIDAuNSkpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVkIGEgYnVuY2ggb2YgcG9pbnRzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IHRoaXMuY291bnQ7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBwID0gdGhpcy5wb2ludHNbaV07IFxyXG4gICAgICAgICAgICBsZXQgdiA9IHRoaXMudmVjdG9yc1tpXVxyXG5cclxuICAgICAgICAgICAgaWYgKGdlb24ubW91c2VMZWZ0RG93bilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gZGlzcnVwdCB0aGUgdmVjdG9yLCBiYXNlZCBvbiBob3cgY2xvc2VieSB0aGUgbW91c2UgaXNcclxuICAgICAgICAgICAgICAgIGxldCBkaXIgPSBWZWN0b3IyLmZyb20yUHQocCwgZ2Vvbi5tb3VzZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gZGlyLmxlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgZGlyLm5vcm1hbGl6ZSgpLnNjYWxlKE1hdGgubWluKDQsIDEwMCAvIGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgdi5hZGQoZGlyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcC5hZGQodik7XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVuZ3RoID0gdi5sZW5ndGgoKVxyXG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gdGhpcy5zcGVlZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdi5zZXRMZW5ndGgobGVuZ3RoICogMC45OSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGJvdW5jZSBhdCBlZGdlXHJcbiAgICAgICAgICAgIGlmIChwLnggPCAwIHx8IHAueCA+IGdlb24uYm91bmRzLngpIHYueCA9IC12Lng7XHJcbiAgICAgICAgICAgIGlmIChwLnkgPCAwIHx8IHAueSA+IGdlb24uYm91bmRzLnkpIHYueSA9IC12Lnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiBtb3VzZSBpcyBuZWFyYnksIG1vdmUgYXdheSBmcm9tIGl0XHJcbiAgICAgICAgaWYgKGdlb24ubW91c2VSaWdodFByZXNzZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2goVmVjdG9yMi5mcm9tUmFuZG9tKCkubXVsKGdlb24uYm91bmRzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlY3RvcnMucHVzaChWZWN0b3IyLmZyb21SYW5kb20oKS5zdWIobmV3IFZlY3RvcjIoMC41LCAwLjUpKS5ub3JtYWxpemUoKSk7XHJcbiAgICAgICAgICAgIH0gICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2VvbjogR2VvbilcclxuICAgIHsgXHJcbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChwID0+IGdlb24uci5wb2ludChwLngsIHAueSkpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IGF0IG1vdXNlIHBvc2l0aW9uO1xyXG4gICAgICAgIGlmIChnZW9uLm1vdXNlTGVmdERvd24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZW9uLnIucG9pbnQoZ2Vvbi5tb3VzZS54LCBnZW9uLm1vdXNlLnkpO1xyXG4gICAgICAgIH0gIFxyXG4gICAgfVxyXG59IiwiLy8gYXV0aG9yIDogSm9zIEZlZW5zdHJhXHJcbi8vIFRPRE86IGV4dGVuZCBmcm9tIGEgZ2VuZXJpYyB0cmlhbmd1bGF0aW9uPyBtaWdodCBiZSBuaWNlIHRvIGhhdmVcclxuXHJcbmltcG9ydCB7IExpbmUyIH0gZnJvbSBcIi4uL2dlbzIvbGluZTJcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWxhdW5heSBcclxue1xyXG4gICAgcHJpdmF0ZSB2dHM6IFZlY3RvcjJbXTtcclxuICAgIHByaXZhdGUgdDogbnVtYmVyW11bXTsgLy8gSSBXQU5UIElOVEVHRVJTIVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnZ0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMudCA9IFtdO1xyXG5cclxuICAgICAgICAvLyBpbml0IGJpZyBiYXNlIHRyaWFuZ2xlXHJcbiAgICAgICAgdGhpcy52dHMucHVzaChuZXcgVmVjdG9yMigtMTAwMDAsLTEwMDAwKSk7XHJcbiAgICAgICAgdGhpcy52dHMucHVzaChuZXcgVmVjdG9yMigxMDAwMCwtMTAwMDApKTtcclxuICAgICAgICB0aGlzLnZ0cy5wdXNoKG5ldyBWZWN0b3IyKDAsIDEwMDAwKSk7XHJcbiAgICAgICAgdGhpcy50LnB1c2goWzAsIDEsIDIsIC0xLCAtMSAsIC0xXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLi4uIEdldHRlcnMgXHJcblxyXG4gICAgcHVibGljIGdldFZlcnRpY2VzKClcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52dHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEVkZ2VzKCkgOiBWZWN0b3IyW11cclxuICAgIHtcclxuICAgICAgICBsZXQgZWRnZXM6IFZlY3RvcjJbXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IobGV0IHRyIG9mIHRoaXMudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBhID0gdGhpcy52dHNbdHJbMF1dO1xyXG4gICAgICAgICAgICBsZXQgYiA9IHRoaXMudnRzW3RyWzFdXTtcclxuICAgICAgICAgICAgbGV0IGMgPSB0aGlzLnZ0c1t0clsyXV07XHJcblxyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGEpO1xyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGIpO1xyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGEpO1xyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGMpO1xyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGIpO1xyXG4gICAgICAgICAgICBlZGdlcy5wdXNoKGMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGVkZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRWb3Jvbm9pRWRnZXMoKSA6IFZlY3RvcjJbXVxyXG4gICAge1xyXG4gICAgICAgIGxldCBlZGdlczogVmVjdG9yMltdID0gW107XHJcbiAgICAgICAgbGV0IGNpcmN1bWNlbnRlcnMgPSB0aGlzLnQubWFwKHRyID0+IFxyXG4gICAgICAgICAgICBWZWN0b3IyLmZyb21DaXJjdW1jZW50ZXIodGhpcy52dHNbdHJbMF1dLCB0aGlzLnZ0c1t0clsxXV0sIHRoaXMudnRzW3RyWzJdXSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBwZXIgbmIgcmVsYXRpb24gOiBpZiBpdHMgbm90IC0xIDogYnVpbGQgYW4gZWRnZSBiZXR3ZWVuIG5iIGNjJ3MuIFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdGhpcy50Lmxlbmd0aCA7aSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlID0gdGhpcy50W2ldO1xyXG4gICAgICAgICAgICBmb3IobGV0IGlpID0gMzsgaWkgPCA2OyBpaSsrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmIgPSB0cmlhbmdsZVtpaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmIgPT0gLTEpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZWRnZXMucHVzaChjaXJjdW1jZW50ZXJzW2ldKTtcclxuICAgICAgICAgICAgICAgIGVkZ2VzLnB1c2goY2lyY3VtY2VudGVyc1tuYl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWRnZXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIC4uLiBJbnRlcmZhY2VcclxuXHJcbiAgICBwdWJsaWMgSW5zZXJ0KGluc2VydGlvbjogVmVjdG9yMilcclxuICAgIHtcclxuICAgICAgICAvLyBkb250IGluc2VydCBpZiB0b28gc2ltaWxhciB0byBleGlzdGluZyBcclxuICAgICAgICBpZiAodGhpcy52dHMuc29tZSh2ID0+IGluc2VydGlvbi5yb3VnaGx5RXF1YWxzKHYsIDAuMSkpKVxyXG4gICAgICAgICAgICB7IGNvbnNvbGUubG9nKFwidG8gY2xvc2UgdG8gZXhpc3RpbmcgcG9pbnRcIik7IHJldHVybjsgfVxyXG5cclxuICAgICAgICAvLyBhZGQgaXRcclxuICAgICAgICBjb25zdCBpbklEID0gdGhpcy52dHMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMudnRzLnB1c2goaW5zZXJ0aW9uKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBnZXQgdHJpYW5nbGUgYW5kIElEIHZhbHVlc1xyXG4gICAgICAgIGNvbnN0IHRySUQgPSB0aGlzLnNlbGVjdFRyaWFuZ2xlKGluc2VydGlvbik7XHJcbiAgICAgICAgaWYgKHRySUQgPT0gLTEpXHJcbiAgICAgICAgICAgIHsgY29uc29sZS5sb2coXCJ0cmlhbmdsZSB3YWxrIGZhaWxlZFwiKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLnRbdHJJRF07ICBcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxfYV9JRCA9IHRyWzBdO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsX2JfSUQgPSB0clsxXTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbF9jX0lEID0gdHJbMl07XHJcblxyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsX2JjSUQgPSB0clszXTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbF9jYUlEID0gdHJbNF07XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxfYWJJRCA9IHRyWzVdO1xyXG5cclxuICAgICAgICBjb25zdCBhYklEID0gdHJJRDtcclxuICAgICAgICBjb25zdCBiY0lEID0gdGhpcy50Lmxlbmd0aDtcclxuICAgICAgICBjb25zdCBjYUlEID0gdGhpcy50Lmxlbmd0aCArIDE7XHJcblxyXG4gICAgICAgIC8vIGVkaXQgMSB0cmlhbmdsZSwgYWRkIDIgbmV3IG9uZXMgXHJcbiAgICAgICAgdGhpcy50W3RySURdID0gW29yaWdpbmFsX2FfSUQsIG9yaWdpbmFsX2JfSUQsIGluSUQsIGJjSUQsIGNhSUQsIG9yaWdpbmFsX2FiSURdOyBcclxuICAgICAgICB0aGlzLnQucHVzaCggICBbb3JpZ2luYWxfYl9JRCwgb3JpZ2luYWxfY19JRCwgaW5JRCwgY2FJRCwgYWJJRCwgb3JpZ2luYWxfYmNJRF0pO1xyXG4gICAgICAgIHRoaXMudC5wdXNoKCAgIFtvcmlnaW5hbF9jX0lELCBvcmlnaW5hbF9hX0lELCBpbklELCBhYklELCBiY0lELCBvcmlnaW5hbF9jYUlEXSk7XHJcblxyXG4gICAgICAgIC8vIGZpeCB0b3BvbG9neVxyXG4gICAgICAgIHRoaXMucmVwbGFjZU5laWdoYm9yKG9yaWdpbmFsX2JjSUQsIHRySUQsIGJjSUQpO1xyXG4gICAgICAgIHRoaXMucmVwbGFjZU5laWdoYm9yKG9yaWdpbmFsX2NhSUQsIHRySUQsIGNhSUQpO1xyXG4gICAgICAgIHRoaXMuZmxpcENvcnJlY3Rpb24oW2FiSUQsIGJjSUQsIGNhSURdLCBpbklEKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIC4uLiBVdGlsXHJcblxyXG4gICAgLy8gc3RvcmUgdGhlIGxhc3QgdHJpYW5nbGVcclxuICAgIHByaXZhdGUgd2Fsa0N1cnNvciA9IDA7XHJcbiAgICBwcml2YXRlIHNlbGVjdFRyaWFuZ2xlKHRhcmdldDogVmVjdG9yMikgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICAvLyBzZWxlY3QgYSB0cmlhbmdsZSBiYXNlZCBvbiBhIHdhbGtpbmcgdHJpYW5nbGUgYWxnb3JpdGhtXHJcbiAgICAgICAgY29uc3QgY29tYmluYXRpb25zID0gW1swLDEsMl0sIFsxLDIsMF0sIFsyLDAsMV1dIFxyXG4gICAgICAgIGxldCB0cklEID0gdGhpcy53YWxrQ3Vyc29yO1xyXG4gICAgICAgIGZvciAobGV0IF8gPSAwOyBfIDwgdGhpcy50Lmxlbmd0aDsgXysrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjb21iaW5hdGlvbnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxldCBzaWduID0gVmVjdG9yMi5nZXRTaWduKFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCwgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52dHNbdGhpcy50W3RySURdW2NbMF1dXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52dHNbdGhpcy50W3RySURdW2NbMV1dXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lnbiA8IDApXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJJRCA9IHRoaXMuZ2V0TmVpZ2hib3JUcmlhbmdsZSh0cklELCB0aGlzLnRbdHJJRF1bY1syXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjWzBdID09IDIpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YWxrQ3Vyc29yID0gdHJJRDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJJRDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdG9vIG1hbnkgc3RlcHMgaGF2ZSBiZWVuIHRha2VuXHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmxpcENvcnJlY3Rpb24odHJfSURTOiBudW1iZXJbXSwgaW5JRDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZmxpcCB1bnRpbCBncmFwaCBpcyBkZWxhdW5heVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIC8vIC4uLiBIZWxwZXJzXHJcblxyXG4gICAgcHJpdmF0ZSByZXBsYWNlTmVpZ2hib3IodHJJRDogbnVtYmVyLCBuYk9sZDogbnVtYmVyLCBuYk5ldzogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHRoZXJlIGFyZSBwcmV0dGllciB3YXlzLCBidXQgdGhpcyBpcyBmYXN0XHJcbiAgICAgICAgaWYgKHRySUQgPT0gLTEpIHJldHVybjtcclxuICAgICAgICBpZiggICAgICB0aGlzLnRbdHJJRF1bM10gPT0gbmJPbGQpICB0aGlzLnRbdHJJRF1bM10gPSBuYk5ldztcclxuICAgICAgICBlbHNlIGlmKCB0aGlzLnRbdHJJRF1bNF0gPT0gbmJPbGQpICB0aGlzLnRbdHJJRF1bNF0gPSBuYk5ldztcclxuICAgICAgICBlbHNlIGlmKCB0aGlzLnRbdHJJRF1bNV0gPT0gbmJPbGQpICB0aGlzLnRbdHJJRF1bNV0gPSBuYk5ldztcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVwbGFjZSBuZWlnaGJvciBmYWlsZWQhXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TmVpZ2hib3JUcmlhbmdsZSh0cmlhbmdsZUlEOiBudW1iZXIsIHBvaW50SUQ6IG51bWJlcikgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnRbdHJpYW5nbGVJRF0uaW5kZXhPZihwb2ludElEKSArIDNcclxuICAgICAgICByZXR1cm4gdGhpcy50W3RyaWFuZ2xlSURdW2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5laWdoYm9yUG9pbnQodHJpYW5nbGVJRDogbnVtYmVyLCBuZWlnaGJvcklEOiBudW1iZXIpIDogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy50W3RyaWFuZ2xlSURdLmluZGV4T2YobmVpZ2hib3JJRCkgLSAzXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudFt0cmlhbmdsZUlEXVtpbmRleF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmFtSGVscGVyc1xyXG57XHJcbiAgICBzdGF0aWMgZ2V0TW92ZW1lbnRWZWN0b3IoZ2VvbjogR2VvbiwgbWluc3BlZWQ6IG51bWJlciwgbWF4c3BlZWQ6IG51bWJlcikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHNwZWVkID0gbWluc3BlZWQ7XHJcbiAgICAgICAgbGV0IHZlbG9jaXR5ID0gIG5ldyBWZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwic2hpZnRcIikpXHJcbiAgICAgICAgICAgIHNwZWVkID0gbWF4c3BlZWQ7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3d1cFwiKSB8fCBnZW9uLklzS2V5RG93bihcIndcIikpXHJcbiAgICAgICAgICAgIHZlbG9jaXR5LmFkZChuZXcgVmVjdG9yMigwLCAxKSk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3dkb3duXCIpIHx8IGdlb24uSXNLZXlEb3duKFwic1wiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKG5ldyBWZWN0b3IyKDAsIC0xKSk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3dsZWZ0XCIpIHx8IGdlb24uSXNLZXlEb3duKFwiYVwiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKG5ldyBWZWN0b3IyKDEsIDApKTtcclxuICAgICAgICBpZiAoZ2Vvbi5Jc0tleURvd24oXCJhcnJvd3JpZ2h0XCIpIHx8IGdlb24uSXNLZXlEb3duKFwiZFwiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKCBuZXcgVmVjdG9yMigtMSwgMCkpO1xyXG4gICAgICAgIHJldHVybiB2ZWxvY2l0eS5zZXRMZW5ndGgoc3BlZWQpO1xyXG4gICAgfVxyXG59XHJcbiAgICBcclxuICAgIFxyXG4iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuXHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XHJcbmltcG9ydCB7IExpbmUyIH0gZnJvbSBcIi4uL2dlbzIvbGluZTJcIjtcclxuaW1wb3J0IHsgRGVsYXVuYXkgfSBmcm9tIFwiLi4vMkQvRGVsYXVuYXlcIjtcclxuaW1wb3J0IHsgUHJvZ3JhbUhlbHBlcnMgfSBmcm9tIFwiLi9Qcm9ncmFtSGVscGVyc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZvcm9ub2lQcm9ncmFtIGV4dGVuZHMgUHJvZ3JhbVxyXG57XHJcbiAgICBkdCA9IG5ldyBEZWxhdW5heSgpO1xyXG4gICAgc3dpdGNoID0gMDtcclxuXHJcbiAgICBzdGFydChnZW9uOiBHZW9uKVxyXG4gICAgeyBcclxuICAgICAgICB0aGlzLmR0Lkluc2VydChuZXcgVmVjdG9yMihnZW9uLndpZHRoIC8gMiwgZ2Vvbi5oZWlnaHQgLyAyKSlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZ2VvbjogR2VvbilcclxuICAgIHtcclxuICAgICAgICBpZiAoZ2Vvbi5tb3VzZVJpZ2h0UHJlc3NlZClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBpbnNlcnRpb24gPSBWZWN0b3IyLmZyb21Db3B5KGdlb24ubW91c2UpO1xyXG4gICAgICAgICAgICB0aGlzLmR0Lkluc2VydChpbnNlcnRpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlQcmVzc2VkKCdoJykpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaCArPSAxO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zd2l0Y2ggPiAyKSBcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoID0gMDsgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG1vdmUgYWxsIHZlY3RvcnNcclxuICAgICAgICBsZXQgdmVsID0gUHJvZ3JhbUhlbHBlcnMuZ2V0TW92ZW1lbnRWZWN0b3IoZ2VvbiwgMiwgNSk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIGdlb24uci5wb2ludHModGhpcy5kdC5nZXRWZXJ0aWNlcygpKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5zd2l0Y2ggPT0gMSlcclxuICAgICAgICAgICAgZ2Vvbi5yLmxpbmVTZWdtZW50cyh0aGlzLmR0LmdldEVkZ2VzKCkpO1xyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3dpdGNoID09IDIpXHJcbiAgICAgICAgICAgIGdlb24uci5saW5lU2VnbWVudHModGhpcy5kdC5nZXRWb3Jvbm9pRWRnZXMoKSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4vR2VvblwiO1xyXG5cclxuaW1wb3J0IHsgU2VsZWN0b3JNZXRhUHJvZ3JhbSB9IGZyb20gXCIuL3Byb2dyYW1zL1NlbGVjdG9yXCI7XHJcblxyXG5pbXBvcnQgeyBCb3VuY2VCYWxsc1Byb2dyYW0gfSBmcm9tIFwiLi9wcm9ncmFtcy9Cb3VuY2VCYWxsc1wiO1xyXG5pbXBvcnQgeyBWb3Jvbm9pUHJvZ3JhbSB9IGZyb20gXCIuL3Byb2dyYW1zL3Zvcm9ub2lQcm9ncmFtXCI7XHJcblxyXG5jb25zdCBwcm9ncmFtczogYW55W10gPSBcclxuW1xyXG4gICAgQm91bmNlQmFsbHNQcm9ncmFtLFxyXG4gICAgVm9yb25vaVByb2dyYW1cclxuXTtcclxuY29uc3QgbWV0YSA9IG5ldyBTZWxlY3Rvck1ldGFQcm9ncmFtKHByb2dyYW1zKTtcclxuXHJcbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpISBhcyBIVE1MQ2FudmFzRWxlbWVudDtcclxuY29uc3QgZ2VvbiA9IG5ldyBHZW9uKGNhbnZhcyk7XHJcbmdlb24ubG9hZE1ldGEobWV0YSk7ICAgICAgICAgICAgIC8vIHByb2dyYW0gc2VsZWN0b3JcclxuZ2Vvbi5sb2FkKG5ldyBWb3Jvbm9pUHJvZ3JhbSgpKTsgLy8gZmlyc3QgcHJvZ3JhbSB0byBsb2FkIFxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///435\n')})();