(()=>{"use strict";eval('\n// CONCATENATED MODULE: ./src/math/Vector2.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) + bsum * (c.y - a.y) + csum * (a.y - b.y)) / d;\r\n        let y = (asum * (b.x - c.x) + bsum * (c.x - a.x) + csum * (a.x - b.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/2D/Renderer2.ts\n// author: Jos Feenstra\r\n\r\n// only renderer talks to ctx & canvas.\r\n// do all the camera work in here\r\nclass Renderer2 {\r\n    constructor(canvas, geon) {\r\n        this.offset = Vector2.zero();\r\n        this.scale = 1;\r\n        // visuals\r\n        this.pointsize = 5;\r\n        this.pointcolor = "#ffffff";\r\n        this.linecolor = "#ffffff";\r\n        this.fillcolor = "#666666";\r\n        this.geon = geon;\r\n        this.ctx = canvas.getContext("2d");\r\n        this.ctx.fillStyle = this.pointcolor;\r\n        this.ctx.strokeStyle = this.linecolor;\r\n    }\r\n    applyOffset(v) {\r\n        return v.clone().add(this.offset).scale(this.scale);\r\n    }\r\n    revertOffset(v) {\r\n        return v.clone().scale(1 / this.scale).sub(this.offset);\r\n    }\r\n    // this clears with a transparant layer, for easy delayed effect\r\n    clearFade(alpha) {\r\n        // adjust color settings\r\n        const color = this.ctx.fillStyle;\r\n        this.ctx.fillStyle = "#000000ff";\r\n        this.ctx.globalAlpha = alpha;\r\n        this.ctx.fillRect(0, 0, this.geon.width, this.geon.height);\r\n        // reset color settings \r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.fillStyle = color;\r\n    }\r\n    clear() {\r\n        this.ctx.clearRect(0, 0, this.geon.width, this.geon.height);\r\n    }\r\n    point(x, y) {\r\n        // todo camera\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.pointsize, 0, Math.PI * 2, false);\r\n        this.ctx.fill();\r\n    }\r\n    points(points) {\r\n        // TODO dont draw if off screen\r\n        for (let i = 0; i < points.length; i++) {\r\n            this.ctx.beginPath();\r\n            let v = this.applyOffset(points[i]);\r\n            this.ctx.arc(v.x, v.y, this.pointsize, 0, Math.PI * 2, false);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    line(line) {\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(line.from.x, line.from.y);\r\n        this.ctx.lineTo(line.to.x, line.to.y);\r\n        this.ctx.stroke();\r\n    }\r\n    lineSegments(vertices) {\r\n        this.ctx.beginPath();\r\n        for (let i = 0; i < vertices.length; i += 2) {\r\n            let ii = i + 1;\r\n            let v1 = this.applyOffset(vertices[i]);\r\n            let v2 = this.applyOffset(vertices[ii]);\r\n            this.ctx.moveTo(v1.x, v1.y);\r\n            this.ctx.lineTo(v2.x, v2.y);\r\n        }\r\n        this.ctx.stroke();\r\n    }\r\n    circle() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    rectangle() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    polygon() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Geon.ts\n\r\n\r\nclass Geon {\r\n    constructor(canvas) {\r\n        this.looping = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.mouse = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        // window\r\n        this.canvas = canvas;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n        this.setWindow();\r\n        // window.onresize = this.setWindow;\r\n        // rendering\r\n        this.r = new Renderer2(canvas, this);\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        // mouse\r\n        canvas.onmousemove = this.setMousePos.bind(this);\r\n        canvas.onmousedown = this.setMouseDown.bind(this);\r\n        canvas.onmouseup = this.setMouseUp.bind(this);\r\n        canvas.oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        };\r\n        // keyboard\r\n        canvas.onkeydown = this.onKeyDown.bind(this);\r\n        canvas.onkeypress = this.onKeyPressed.bind(this);\r\n        canvas.onkeyup = this.onKeyUp.bind(this);\r\n        for (let i = 0; i < 223; i++) {\r\n            this.keysDown[i] = false;\r\n        }\r\n        canvas.focus();\r\n    }\r\n    // ...\r\n    load(game) {\r\n        this.program = game;\r\n        game.start(this);\r\n        if (!this.looping)\r\n            this.loop();\r\n    }\r\n    loadMeta(program) {\r\n        this.meta = program;\r\n        program.start(this);\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n    }\r\n    // ...\r\n    loop() {\r\n        this.looping = true;\r\n        function step() {\r\n            var _a, _b;\r\n            // update time\r\n            this.newTime = Date.now();\r\n            this.tick += (this.newTime - this.oldTime);\r\n            this.oldTime = this.newTime;\r\n            // update mouse\r\n            this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n            this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n            this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n            this.mouseLeftPrev = this.mouseLeftDown;\r\n            this.mouseRightPrev = this.mouseRightDown;\r\n            this.mouseMiddlePrev = this.mouseMiddleDown;\r\n            // TODO : dont update if nothing moved (?)\r\n            this.program.update(this);\r\n            this.r.clear();\r\n            this.program.draw(this);\r\n            // update metaprogram afterwards\r\n            (_a = this.meta) === null || _a === void 0 ? void 0 : _a.update(this);\r\n            (_b = this.meta) === null || _b === void 0 ? void 0 : _b.draw(this);\r\n            // refresh keypresses\r\n            this.keysPressed = [];\r\n            // Call the game loop\r\n            window.requestAnimationFrame(step.bind(this));\r\n        }\r\n        window.requestAnimationFrame(step.bind(this));\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mouse = this.r.revertOffset(new Vector2(e.clientX, e.clientY));\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n    setWindow() {\r\n        console.log("setting window...");\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n        this.canvas.style.width = this.canvas.width + "px";\r\n        this.canvas.style.height = this.canvas.height + "px";\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Program.ts\nclass Program {\r\n    start(geon) {\r\n        //  init geometry \r\n    }\r\n    update(geon) {\r\n        // update geometry\r\n    }\r\n    draw(geon) {\r\n        // draw geometry\r\n    }\r\n    exit(geon) {\r\n        // deallocate ? clean?\r\n    }\r\n}\r\n// just a flag for now\r\nclass MetaProgram extends Program {\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Selector.ts\n\r\n// metaprogram\r\nclass SelectorMetaProgram extends MetaProgram {\r\n    constructor(programs) {\r\n        super();\r\n        this.current = 0;\r\n        this.isAnimating = false;\r\n        this.animationCounter = 1;\r\n        this.comeback = false;\r\n        this.programs = programs;\r\n        if (this.programs.length == 0)\r\n            throw "Need at least 1 program!";\r\n    }\r\n    start(geon) {\r\n        this.programs[this.current];\r\n    }\r\n    update(geon) {\r\n        // listen for keypresses \r\n        // stupid i know. More specific listening would be better.\r\n        for (let i = 1; i < 10; i++) {\r\n            if (geon.IsKeyPressed(i.toString())) {\r\n                this.prepareSwapProgram(i - 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        const speed = 0.015;\r\n        if (this.isAnimating) {\r\n            if (this.animationCounter > 1) {\r\n                this.isAnimating = false;\r\n            }\r\n            geon.r.clearFade(1 - this.animationCounter);\r\n            if (this.animationCounter > 0) {\r\n                if (this.comeback)\r\n                    this.animationCounter += speed;\r\n                else\r\n                    this.animationCounter -= speed;\r\n            }\r\n            else {\r\n                this.animationCounter += 0.01;\r\n                this.comeback = true;\r\n                this.swapProgram(geon);\r\n            }\r\n        }\r\n        // draw transitions\r\n    }\r\n    prepareSwapProgram(num) {\r\n        if (num < 0 || num >= this.programs.length) {\r\n            console.log("no program [" + num.toString() + "].");\r\n            return;\r\n        }\r\n        console.log("swapping to program " + num.toString());\r\n        // prepare for animation\r\n        this.current = num;\r\n        this.isAnimating = true;\r\n        this.comeback = false;\r\n        this.animationCounter = 1;\r\n        // load\r\n        // fade in\r\n    }\r\n    swapProgram(geon) {\r\n        geon.load(new this.programs[this.current]());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/BounceBalls.ts\n\r\n\r\nclass BounceBallsProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.points = [];\r\n        this.vectors = [];\r\n        this.count = 100;\r\n        this.speed = 2;\r\n    }\r\n    start(geon) {\r\n        this.points = new Array(this.count);\r\n        this.vectors = new Array(this.count);\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.points[i] = Vector2.fromRandom().mul(geon.bounds);\r\n            this.vectors[i] = Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize();\r\n        }\r\n        console.log("created a bunch of points");\r\n    }\r\n    update(geon) {\r\n        for (let i = 0; i < this.count; i++) {\r\n            let p = this.points[i];\r\n            let v = this.vectors[i];\r\n            if (geon.mouseLeftDown) {\r\n                // disrupt the vector, based on how closeby the mouse is\r\n                let dir = Vector2.from2Pt(p, geon.mouse);\r\n                let length = dir.length();\r\n                dir.normalize().scale(Math.min(4, 100 / length));\r\n                v.add(dir);\r\n            }\r\n            p.add(v);\r\n            let length = v.length();\r\n            if (length > this.speed) {\r\n                v.setLength(length * 0.99);\r\n            }\r\n            // bounce at edge\r\n            if (p.x < 0 || p.x > geon.bounds.x)\r\n                v.x = -v.x;\r\n            if (p.y < 0 || p.y > geon.bounds.y)\r\n                v.y = -v.y;\r\n        }\r\n        // if mouse is nearby, move away from it\r\n        if (geon.mouseRightPressed) {\r\n            for (let i = 0; i < 100; i++) {\r\n                this.count += 1;\r\n                this.points.push(Vector2.fromRandom().mul(geon.bounds));\r\n                this.vectors.push(Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize());\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        this.points.forEach(p => geon.r.point(p.x, p.y));\r\n        // draw at mouse position;\r\n        if (geon.mouseLeftDown) {\r\n            geon.r.point(geon.mouse.x, geon.mouse.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/geo2/Delaunay.ts\n// author : Jos Feenstra\r\n// TODO: extend from a generic triangulation? might be nice to have\r\n\r\nclass Delaunay {\r\n    constructor() {\r\n        // ... Util\r\n        // store the last triangle\r\n        this.walkCursor = 0;\r\n        this.pts = [];\r\n        this.trs = [];\r\n        this.cc = [];\r\n        // init big base triangle\r\n        this.pts.push(new Vector2(-10000, -10000));\r\n        this.pts.push(new Vector2(10000, -10000));\r\n        this.pts.push(new Vector2(0, 10000));\r\n        this.trs.push([0, 1, 2, -1, -1, -1]);\r\n    }\r\n    // ... Getters \r\n    getVertices() {\r\n        return this.pts;\r\n    }\r\n    getEdges() {\r\n        let edges = [];\r\n        for (let tr of this.trs) {\r\n            let a = this.pts[tr[0]];\r\n            let b = this.pts[tr[1]];\r\n            let c = this.pts[tr[2]];\r\n            edges.push(a);\r\n            edges.push(b);\r\n            edges.push(a);\r\n            edges.push(c);\r\n            edges.push(b);\r\n            edges.push(c);\r\n        }\r\n        return edges;\r\n    }\r\n    calculateCC() {\r\n        this.cc = this.trs.map(tr => Vector2.fromCircumcenter(this.pts[tr[0]], this.pts[tr[1]], this.pts[tr[2]]));\r\n    }\r\n    getVoronoiEdges(calculateCC = false) {\r\n        let edges = [];\r\n        if (calculateCC || this.cc.length != this.trs.length)\r\n            this.calculateCC();\r\n        // per nb relation : if its not -1 : build an edge between nb cc\'s. \r\n        for (let i = 0; i < this.trs.length; i++) {\r\n            let triangle = this.trs[i];\r\n            for (let ii = 3; ii < 6; ii++) {\r\n                let nb = triangle[ii];\r\n                if (nb == -1)\r\n                    continue;\r\n                edges.push(this.cc[i]);\r\n                edges.push(this.cc[nb]);\r\n            }\r\n        }\r\n        return edges;\r\n    }\r\n    // ... Interface\r\n    Insert(insertion) {\r\n        // dont insert if too similar to existing \r\n        if (this.pts.some(v => insertion.roughlyEquals(v, 0.1))) {\r\n            console.log("to close to existing point");\r\n            return false;\r\n        }\r\n        // add it\r\n        const inID = this.pts.length;\r\n        this.pts.push(insertion);\r\n        // get triangle and ID values\r\n        const trID = this.selectTriangle(insertion);\r\n        if (trID == -1) {\r\n            console.log("triangle walk failed");\r\n            return false;\r\n        }\r\n        const tr = this.trs[trID];\r\n        const original_a_ID = tr[0];\r\n        const original_b_ID = tr[1];\r\n        const original_c_ID = tr[2];\r\n        const original_bcID = tr[3];\r\n        const original_caID = tr[4];\r\n        const original_abID = tr[5];\r\n        const abID = trID;\r\n        const bcID = this.trs.length;\r\n        const caID = this.trs.length + 1;\r\n        // edit 1 triangle, add 2 new ones \r\n        this.trs[trID] = [original_a_ID, original_b_ID, inID, bcID, caID, original_abID];\r\n        this.trs.push([original_b_ID, original_c_ID, inID, caID, abID, original_bcID]);\r\n        this.trs.push([original_c_ID, original_a_ID, inID, abID, bcID, original_caID]);\r\n        // fix topology\r\n        this.replaceNeighbor(original_bcID, trID, bcID);\r\n        this.replaceNeighbor(original_caID, trID, caID);\r\n        this.makeDelaunay([abID, bcID, caID], inID);\r\n        // succes!\r\n        return true;\r\n    }\r\n    selectTriangle(target) {\r\n        // select a triangle based on a walking triangle algorithm\r\n        const combinations = [[0, 1, 2], [1, 2, 0], [2, 0, 1]];\r\n        let trID = this.walkCursor;\r\n        for (let _ = 0; _ < this.trs.length; _++) {\r\n            for (let c of combinations) {\r\n                if (trID == -1)\r\n                    return -1;\r\n                let sign = Vector2.getSign(target, this.pts[this.trs[trID][c[0]]], this.pts[this.trs[trID][c[1]]]);\r\n                if (sign < 0) {\r\n                    trID = this.getNeighborTriangle(trID, this.trs[trID][c[2]]);\r\n                    break;\r\n                }\r\n                if (c[0] == 2) {\r\n                    this.walkCursor = trID;\r\n                    return trID;\r\n                }\r\n            }\r\n        }\r\n        // too many steps have been taken\r\n        this.walkCursor = 0;\r\n        return -1;\r\n    }\r\n    makeDelaunay(trIDS, inID) {\r\n        // flip until graph is delaunay\r\n        while (trIDS.length > 0) {\r\n            let trID = trIDS.pop();\r\n            let tr = this.trs[trID];\r\n            let nbID = this.getNeighborTriangle(trID, inID);\r\n            if (nbID == -1)\r\n                continue;\r\n            let qID = this.getNeighborPoint(nbID, trID);\r\n            let q = this.pts[qID];\r\n            // let c = Vector2.fromCircumcenter(this.pts[tr[0]], this.pts[tr[1]], this.pts[tr[2]]);\r\n            // if (!c.equals(Vector2.NaN()) && c.disTo(q) < c.disTo(this.pts[tr[0]]))\r\n            // {\r\n            //     // flip!\r\n            //     // points p, q, r and s\r\n            //     const r = tr[0];\r\n            //     const s = tr[1];\r\n            //     // foreign neighbors \r\n            //     const fnb_1 = this.getNeighborTriangle(trID, r);\r\n            //     const fnb_2 = this.getNeighborTriangle(trID, s);\r\n            //     const fnb_3 = this.getNeighborTriangle(nbID, r);\r\n            //     const fnb_4 = this.getNeighborTriangle(nbID, s);\r\n            // }\r\n        }\r\n    }\r\n    // ... Helpers\r\n    replaceNeighbor(trID, nbOld, nbNew) {\r\n        // there are prettier ways, but this is fast\r\n        if (trID == -1)\r\n            return;\r\n        if (this.trs[trID][3] == nbOld)\r\n            this.trs[trID][3] = nbNew;\r\n        else if (this.trs[trID][4] == nbOld)\r\n            this.trs[trID][4] = nbNew;\r\n        else if (this.trs[trID][5] == nbOld)\r\n            this.trs[trID][5] = nbNew;\r\n        else\r\n            console.log("replace neighbor failed!");\r\n    }\r\n    getNeighborTriangle(triangleID, pointID) {\r\n        let index = this.trs[triangleID].indexOf(pointID) + 3;\r\n        return this.trs[triangleID][index];\r\n    }\r\n    getNeighborPoint(triangleID, neighborID) {\r\n        let index = this.trs[triangleID].indexOf(neighborID) - 3;\r\n        return this.trs[triangleID][index];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/ProgramHelpers.ts\n\r\nclass ProgramHelpers {\r\n    static getMovementVector(geon, minspeed, maxspeed) {\r\n        let speed = minspeed;\r\n        let velocity = new Vector2(0, 0);\r\n        if (geon.IsKeyDown("shift"))\r\n            speed = maxspeed;\r\n        if (geon.IsKeyDown("arrowup") || geon.IsKeyDown("w"))\r\n            velocity.add(new Vector2(0, 1));\r\n        if (geon.IsKeyDown("arrowdown") || geon.IsKeyDown("s"))\r\n            velocity.add(new Vector2(0, -1));\r\n        if (geon.IsKeyDown("arrowleft") || geon.IsKeyDown("a"))\r\n            velocity.add(new Vector2(1, 0));\r\n        if (geon.IsKeyDown("arrowright") || geon.IsKeyDown("d"))\r\n            velocity.add(new Vector2(-1, 0));\r\n        return velocity.setLength(speed);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/voronoiProgram.ts\n\r\n\r\n\r\n\r\nclass VoronoiProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.dt = new Delaunay();\r\n        this.switch = 0;\r\n    }\r\n    start(geon) {\r\n        this.dt.Insert(new Vector2(geon.width / 2, geon.height / 2));\r\n    }\r\n    update(geon) {\r\n        if (geon.mouseRightPressed) {\r\n            let insertion = Vector2.fromCopy(geon.mouse);\r\n            this.dt.Insert(insertion);\r\n        }\r\n        if (geon.IsKeyPressed(\'h\')) {\r\n            this.switch += 1;\r\n            if (this.switch > 2)\r\n                this.switch = 0;\r\n        }\r\n        // update camera\r\n        let vel = ProgramHelpers.getMovementVector(geon, 2 / geon.r.scale, 5 / geon.r.scale);\r\n        geon.r.offset.add(vel);\r\n        if (geon.IsKeyPressed(\'q\'))\r\n            geon.r.scale *= 1.5;\r\n        if (geon.IsKeyPressed(\'e\'))\r\n            geon.r.scale *= 0.5;\r\n    }\r\n    draw(geon) {\r\n        geon.r.points(this.dt.getVertices());\r\n        if (this.switch == 1)\r\n            geon.r.lineSegments(this.dt.getEdges());\r\n        else if (this.switch == 2)\r\n            geon.r.lineSegments(this.dt.getVoronoiEdges());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\nconst programs = [\r\n    BounceBallsProgram,\r\n    VoronoiProgram\r\n];\r\nconst meta = new SelectorMetaProgram(programs);\r\nconst canvas = document.getElementById("canvas");\r\nconst geon = new Geon(canvas);\r\ngeon.loadMeta(meta); // program selector\r\ngeon.load(new VoronoiProgram()); // first program to load \r\nconsole.log("everything loaded.");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9uLy4vc3JjL21hdGgvVmVjdG9yMi50cz9hY2VkIiwid2VicGFjazovL2dlb24vLi9zcmMvMkQvUmVuZGVyZXIyLnRzPzBiNzgiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9HZW9uLnRzP2E3NGQiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy9Qcm9ncmFtLnRzPzFiMWIiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy9TZWxlY3Rvci50cz82YjgyIiwid2VicGFjazovL2dlb24vLi9zcmMvcHJvZ3JhbXMvQm91bmNlQmFsbHMudHM/YTMxNCIsIndlYnBhY2s6Ly9nZW9uLy4vc3JjL2dlbzIvRGVsYXVuYXkudHM/YzE1OSIsIndlYnBhY2s6Ly9nZW9uLy4vc3JjL3Byb2dyYW1zL1Byb2dyYW1IZWxwZXJzLnRzPzhlMTQiLCJ3ZWJwYWNrOi8vZ2Vvbi8uL3NyYy9wcm9ncmFtcy92b3Jvbm9pUHJvZ3JhbS50cz9iMDc5Iiwid2VicGFjazovL2dlb24vLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVCQUF1QjtBQUN2Qiw0QkFBNEI7QUFDNUIsaUZBQWlGO0FBQ2pGLDJCQUEyQjtBQUVwQixNQUFNLE9BQU87SUFJaEIsWUFBWSxDQUFVLEVBQUUsQ0FBVTtRQUU5QixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztJQUVKLGdDQUFnQztJQUVoQyxNQUFNLENBQUMsUUFBUSxDQUFFLEVBQVUsRUFBRSxFQUFVLEVBQUUsS0FBWTtRQUVwRCxPQUFPLElBQUksT0FBTyxDQUNqQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFFLEdBQUcsS0FBSyxFQUM5QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUUsRUFBRSxDQUFDLENBQUMs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Q0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVUsRUFBRSxHQUFVO1FBRWpDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUUsTUFBTSxJQUFJLENBQUMsQ0FBRSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVELEtBQUs7UUFFSixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsSUFBSTtRQUVILElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxLQUFLO1FBRUosSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMs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SUFBSSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQzthQUN2QyxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNKOzs7QUNuRDZCO0FBRTRCO0FBRUU7QUFDRDtBQUUzRCxNQUFNLFFBQVEsR0FDZDtJQUNJLGtCQUFrQjtJQUNsQixjQUFjO0NBQ2pCLENBQUM7QUFDRixNQUFNLElBQUksR0FBRyxJQUFJLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRS9DLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUF1QixDQUFDO0FBQ3ZFLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBYSxtQkFBbUI7QUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7QUFHMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDIiwiZmlsZSI6IjEwMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGF1dGhvcjogSm9zIEZlZW5zdHJhXHJcbi8vIGluc3BpcmF0aW9uIGZyb20gVGhyZWUuanNcclxuLy8gbm90ZTogcmVjeWNsZSB0aGUgY2xhc3MgYXMgbXVjaCBhcyBwb3NzYmxlLCBidWlsZGluZyBhIG5ldyBjbGFzcyBpcyBleHBlbnNpdmUsXHJcbi8vIGVzcGVjaWFsbHkgaW4gamF2YXNjcmlwdFxyXG5cclxuZXhwb3J0IGNsYXNzIFZlY3RvcjJcclxue1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IoeCA6IG51bWJlciwgeSA6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcblxyXG5cdC8vIC0tLSBmYWN0b3JpZXMgJiBvdGhlciBzdGF0aWNzXHJcblxyXG5cdHN0YXRpYyBmcm9tTGVycCggdjE6VmVjdG9yMiwgdjI6VmVjdG9yMiwgYWxwaGE6bnVtYmVyICkgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgVmVjdG9yMihcclxuXHRcdFx0djEueCArICggdjIueCAtIHYxLnggKSAqIGFscGhhLFxyXG5cdFx0XHR2MS55ICsgKCB2Mi55IC0gdjEueSApICogYWxwaGFcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuICAgIHN0YXRpYyBmcm9tUmFuZG9tKCkgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG5cdFx0ICAgIE1hdGgucmFuZG9tKCksXHJcblx0XHQgICAgTWF0aC5yYW5kb20oKVxyXG4gICAgICAgIClcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tMlB0KGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRyZXR1cm4gbmV3IFZlY3RvcjIoXHJcblx0XHRcdGZyb20ueCAtIHRvLngsXHJcblx0XHRcdGZyb20ueSAtIHRvLnlcclxuXHRcdClcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmcm9tQ29weShvdGhlcjogVmVjdG9yMikgOiBWZWN0b3IyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuemVybygpLmNvcHkob3RoZXIpO1x0XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgemVybygpIHsgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApOyB9XHJcblxyXG5cclxuXHRzdGF0aWMgTmFOKCkgeyByZXR1cm4gbmV3IFZlY3RvcjIoTmFOLCBOYU4pOyB9XHJcblxyXG5cdHN0YXRpYyBmcm9tQ2lyY3VtY2VudGVyKGE6IFZlY3RvcjIsIGI6IFZlY3RvcjIsIGM6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGFzdW0gPSBhLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGJzdW0gPSBiLnNxdWFyZVN1bSgpO1xyXG4gICAgICAgIGNvbnN0IGNzdW0gPSBjLnNxdWFyZVN1bSgpO1xyXG5cclxuICAgICAgICAvLyBzb3J0IG9mIGNyb3NzIHByb2R1Y3RcclxuICAgICAgICBsZXQgZCA9IDIgKiAoYS54ICogKGIueSAtIGMueSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICBiLnggKiAoYy55IC0gYS55KSArIFxyXG4gICAgICAgICAgICAgICAgICAgICBjLnggKiAoYS55IC0gYi55KSk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoaXMgdHJpYW5nbGUgaGFzIG5vIGNpcmN1bWNlbnRlcj8gXHJcbiAgICAgICAgaWYgKGQgPCAwLjAwMDAwMSlcclxuXHRcdFx0cmV0dXJuIFZlY3RvcjIuTmFOKCk7IFxyXG5cclxuICAgICAgICBsZXQgeCA9IChhc3VtICogKGIueSAtIGMueSkgKyBic3VtICogKGMueSAtIGEueSkgKyBjc3VtICogKGEueSAtIGIueSkpIC8gZDtcclxuICAgICAgICBsZXQgeSA9IChhc3VtICogKGIueCAtIGMueCkgKyBic3VtICogKGMueCAtIGEueCkgKyBjc3VtICogKGEueCAtIGIueCkpIC8gZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHgseSk7XHJcbiAgICB9XHJcblxyXG5cdHN0YXRpYyBnZXRTaWduKGE6VmVjdG9yMiwgYjpWZWN0b3IyICwgYzpWZWN0b3IyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdC8vIHRlc3QgaGFsZiBwbGFuZSByZWxhdGlvbnNoaXBcclxuXHRcdC8vIDwwIDogcG9pbnQgb24gZmlyc3QgaGFsZlxyXG5cdFx0Ly8gMCAgOiBwb2ludHMgY29sbGluZWFyXHJcblx0XHQvLyA+MCA6IHBvaW50IG9uIHNlY29uZCBoYWxmIFxyXG5cdFx0cmV0dXJuIChhLnggLSBjLngpICogKGIueSAtIGMueSkgLSBcclxuXHRcdCAgICAgICAoYi54IC0gYy54KSAqIChhLnkgLSBjLnkpO1xyXG5cdH1cclxuXHJcblx0Ly8gLS0tIGJhc2ljc1xyXG5cclxuXHRzZXQoeDpudW1iZXIsIHk6bnVtYmVyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHR0aGlzLnggPSB4O1xyXG5cdFx0dGhpcy55ID0geTtcclxuXHRcdHJldHVybiB0aGlzIFx0XHRcclxuXHR9XHJcblxyXG5cdHJvdWdobHlFcXVhbHModjogVmVjdG9yMiwgdG9sOm51bWJlcikgOiBib29sZWFuXHJcblx0e1xyXG5cdFx0cmV0dXJuIChNYXRoLmFicyh0aGlzLnggLSB2LngpIDwgdG9sICYmIFxyXG5cdFx0XHRcdE1hdGguYWJzKHRoaXMueSAtIHYueSkgPCB0b2wpXHJcblx0fVxyXG5cclxuXHRlcXVhbHModjpWZWN0b3IyKSA6IGJvb2xlYW5cclxuXHR7XHJcblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICk7XHJcblx0fVxyXG5cclxuICAgIHRvU3RyaW5nKCkgOiBzdHJpbmdcclxuICAgIHtcclxuICAgICAgICByZXR1cm4gYFZlY3RvcjMoJHt0aGlzLnh9LCAke3RoaXMueX0pYDtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSgpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLngsIHRoaXMueSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29weSh2OiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggPSB2Lng7XHJcbiAgICAgICAgdGhpcy55ID0gdi55O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHQvLyAtLS0gbWF0aFxyXG5cclxuICAgIGFkZCh2OiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggKz0gdi54O1xyXG4gICAgICAgIHRoaXMueSArPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3ViKHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAtPSB2Lng7XHJcbiAgICAgICAgdGhpcy55IC09IHYueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgbXVsKHY6IFZlY3RvcjIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAqPSB2Lng7XHJcbiAgICAgICAgdGhpcy55ICo9IHYueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZSh2OiBudW1iZXIpIDogVmVjdG9yMlxyXG4gICAge1xyXG4gICAgICAgIHRoaXMueCAqPSB2O1xyXG4gICAgICAgIHRoaXMueSAqPSB2O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGRpdih2OiBWZWN0b3IyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggLz0gdi54O1xyXG4gICAgICAgIHRoaXMueSAvPSB2Lnk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGl2c2NhbGUodjogbnVtYmVyKSA6IFZlY3RvcjJcclxuICAgIHtcclxuICAgICAgICB0aGlzLnggLz0gdjtcclxuICAgICAgICB0aGlzLnkgLz0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBtaW4ob3RoZXI6IFZlY3RvcjIpIDogVmVjdG9yMiBcclxuICAgIHtcclxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIG90aGVyLnggKTtcclxuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIG90aGVyLnkgKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0bWF4KG90aGVyOiBWZWN0b3IyKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgb3RoZXIueCApO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgb3RoZXIueSApO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRjbGFtcChtaW46IFZlY3RvcjIsIG1heDogVmVjdG9yMikgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXHJcblx0XHR0aGlzLnggPSBNYXRoLm1heChtaW4ueCwgTWF0aC5taW4obWF4LngsIHRoaXMueCkpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5tYXgobWluLnksIE1hdGgubWluKG1heC55LCB0aGlzLnkpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0Y2xhbXBTY2FsYXIobWluVmFsOm51bWJlciwgbWF4VmFsOm51bWJlcikgOiBWZWN0b3IyIFxyXG5cdHtcclxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKG1heFZhbCwgdGhpcy54KSk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbihtYXhWYWwsIHRoaXMueSkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRjbGFtcExlbmd0aChtaW46bnVtYmVyLCBtYXg6bnVtYmVyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRjb25zdCBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xyXG5cdFx0cmV0dXJuIHRoaXMuZGl2c2NhbGUoIGxlbmd0aCB8fCAxICkuc2NhbGUoIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCBsZW5ndGgpKSk7XHJcblx0fVxyXG5cclxuXHRmbG9vcigpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSBNYXRoLmZsb29yKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmZsb29yKHRoaXMueSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdGNlaWwoKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5jZWlsKHRoaXMueCk7XHJcblx0XHR0aGlzLnkgPSBNYXRoLmNlaWwodGhpcy55KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0cm91bmQoKSA6IFZlY3RvcjIgXHJcblx0e1xyXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCh0aGlzLngpO1xyXG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCh0aGlzLnkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRyb3VuZFRvWmVybygpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSAodGhpcy54IDwgMCkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XHJcblx0XHR0aGlzLnkgPSAodGhpcy55IDwgMCkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdG5lZ2F0ZSgpIDogVmVjdG9yMiBcclxuXHR7XHJcblx0XHR0aGlzLnggPSAtIHRoaXMueDtcclxuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRkb3QoIHY6VmVjdG9yMiApIDogbnVtYmVyIFxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2Lnk7XHJcblx0fVxyXG5cclxuXHRjcm9zcyggdjpWZWN0b3IyICkgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54OyAvLyA/Pz8/XHJcblx0fVxyXG5cclxuXHRzcXVhcmVTdW0oKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XHJcblx0fVxyXG5cclxuXHRsZW5ndGgoKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KTtcclxuXHR9XHJcblxyXG5cdG1hbmhhdCgpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKTtcclxuXHR9XHJcblxyXG5cdG5vcm1hbGl6ZSgpIDogVmVjdG9yMlxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmRpdnNjYWxlKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcclxuXHR9XHJcblxyXG5cdGFuZ2xlKCkgOiBudW1iZXJcclxuXHR7XHJcblx0XHQvLyBjb21wdXRlcyB0aGUgYW5nbGUgaW4gcmFkaWFucyB3aXRoIHJlc3BlY3QgdG8gdGhlIHBvc2l0aXZlIHgtYXhpc1xyXG5cdFx0Y29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKCAtIHRoaXMueSwgLSB0aGlzLnggKSArIE1hdGguUEk7XHJcblx0XHRyZXR1cm4gYW5nbGU7XHJcblxyXG5cdH1cclxuXHJcblx0ZGlzVG8odjogVmVjdG9yMikgOiBudW1iZXJcclxuXHR7XHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KHRoaXMuZGlzVG9TcXVhcmVkKHYpKTtcclxuXHR9XHJcblxyXG5cdGRpc1RvU3F1YXJlZCh2OiBWZWN0b3IyKSA6IG51bWJlclxyXG5cdHtcclxuXHRcdGNvbnN0IGR4ID0gdGhpcy54IC0gdi54LCBcclxuXHRcdFx0ICBkeSA9IHRoaXMueSAtIHYueTtcclxuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcclxuXHR9XHJcblxyXG5cdGRpc1RvTWFuaGF0KHY6IFZlY3RvcjIpIDogbnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIE1hdGguYWJzKHRoaXMueCAtIHYueCkgKyBNYXRoLmFicyh0aGlzLnkgLSB2LnkpO1xyXG5cdH1cclxuXHJcblx0c2V0TGVuZ3RoKGxlbmd0aDogbnVtYmVyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5zY2FsZShsZW5ndGgpO1xyXG5cdH1cclxuXHJcblx0bGVycChvdGhlcjogVmVjdG9yMiwgYWxwaGE6bnVtYmVyKSA6IFZlY3RvcjJcclxuXHR7XHJcblx0XHR0aGlzLnggKz0gKCBvdGhlci54IC0gdGhpcy54ICkgKiBhbHBoYTtcclxuXHRcdHRoaXMueSArPSAoIG90aGVyLnkgLSB0aGlzLnkgKSAqIGFscGhhO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59IiwiLy8gYXV0aG9yOiBKb3MgRmVlbnN0cmFcclxuXHJcbmltcG9ydCB7IExpbmUyIH0gZnJvbSBcIi4uL2dlbzIvbGluZTJcIjtcclxuaW1wb3J0IHsgR2VvbiB9IGZyb20gXCIuLi9HZW9uXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XHJcblxyXG4vLyBvbmx5IHJlbmRlcmVyIHRhbGtzIHRvIGN0eCAmIGNhbnZhcy5cclxuLy8gZG8gYWxsIHRoZSBjYW1lcmEgd29yayBpbiBoZXJlXHJcbmV4cG9ydCBjbGFzcyBSZW5kZXJlcjJcclxue1xyXG4gICAgcHVibGljIG9mZnNldCA9IFZlY3RvcjIuemVybygpO1xyXG4gICAgcHVibGljIHNjYWxlID0gMTtcclxuXHJcbiAgICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcHJpdmF0ZSBnZW9uOiBHZW9uO1xyXG5cclxuICAgIC8vIHZpc3VhbHNcclxuICAgIHByaXZhdGUgcG9pbnRzaXplID0gNTtcclxuICAgIHByaXZhdGUgcG9pbnRjb2xvciA9IFwiI2ZmZmZmZlwiO1xyXG5cclxuICAgIHByaXZhdGUgbGluZWNvbG9yID0gXCIjZmZmZmZmXCI7XHJcbiAgICBwcml2YXRlIGZpbGxjb2xvciA9IFwiIzY2NjY2NlwiO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5nZW9uID0gZ2VvbjtcclxuICAgICAgICB0aGlzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikhO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IHRoaXMucG9pbnRjb2xvcjtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMubGluZWNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXBwbHlPZmZzZXQodjogVmVjdG9yMikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHYuY2xvbmUoKS5hZGQodGhpcy5vZmZzZXQpLnNjYWxlKHRoaXMuc2NhbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXZlcnRPZmZzZXQodjogVmVjdG9yMikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHYuY2xvbmUoKS5zY2FsZSgxIC8gdGhpcy5zY2FsZSkuc3ViKHRoaXMub2Zmc2V0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0aGlzIGNsZWFycyB3aXRoIGEgdHJhbnNwYXJhbnQgbGF5ZXIsIGZvciBlYXN5IGRlbGF5ZWQgZWZmZWN0XHJcbiAgICBjbGVhckZhZGUoYWxwaGE6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvLyBhZGp1c3QgY29sb3Igc2V0dGluZ3NcclxuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMuY3R4LmZpbGxTdHlsZTtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBcIiMwMDAwMDBmZlwiO1xyXG4gICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gYWxwaGE7ICBcclxuXHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5nZW9uLndpZHRoLCB0aGlzLmdlb24uaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy8gcmVzZXQgY29sb3Igc2V0dGluZ3MgXHJcbiAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSAxOyAgXHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmdlb24ud2lkdGgsIHRoaXMuZ2Vvbi5oZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvaW50KHg6IG51bWJlciwgeTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIC8vIHRvZG8gY2FtZXJhXHJcbiAgICAgICAgLy8gVE9ETyBkb250IGRyYXcgaWYgb2ZmIHNjcmVlblxyXG5cclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5hcmMoeCwgeSwgdGhpcy5wb2ludHNpemUsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHBvaW50cyhwb2ludHM6IFZlY3RvcjJbXSlcclxuICAgIHtcclxuICAgICAgICAvLyBUT0RPIGRvbnQgZHJhdyBpZiBvZmYgc2NyZWVuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgbGV0IHYgPSB0aGlzLmFwcGx5T2Zmc2V0KHBvaW50c1tpXSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmFyYyh2LngsIHYueSwgdGhpcy5wb2ludHNpemUsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgICAgICB9ICAgIFxyXG4gICAgfVxyXG5cclxuICAgIGxpbmUobGluZTogTGluZTIpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gVE9ETyBkb250IGRyYXcgaWYgb2ZmIHNjcmVlblxyXG5cclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5tb3ZlVG8obGluZS5mcm9tLngsIGxpbmUuZnJvbS55KTtcclxuICAgICAgICB0aGlzLmN0eC5saW5lVG8obGluZS50by54LCBsaW5lLnRvLnkpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxpbmVTZWdtZW50cyh2ZXJ0aWNlczogVmVjdG9yMltdKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpICs9IDIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgaWkgPSBpICsgMTtcclxuICAgICAgICAgICAgbGV0IHYxID0gdGhpcy5hcHBseU9mZnNldCh2ZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgICAgIGxldCB2MiA9IHRoaXMuYXBwbHlPZmZzZXQodmVydGljZXNbaWldKTtcclxuICAgICAgICAgICAgdGhpcy5jdHgubW92ZVRvKHYxLngsIHYxLnkpO1xyXG4gICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8odjIueCwgdjIueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNpcmNsZSgpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfSBcclxuXHJcbiAgICByZWN0YW5nbGUoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgICAgICB0aGlzLmN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwb2x5Z29uKCkgXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSAnLi8yRC9SZW5kZXJlcjInO1xyXG5pbXBvcnQgeyBQcm9ncmFtIH0gZnJvbSAnLi9wcm9ncmFtcy9Qcm9ncmFtJztcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gJy4vbWF0aC9WZWN0b3IyJztcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4vbWF0aC9WZWN0b3IzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW9uXHJcbntcclxuICAgIHByb2dyYW0/OiBQcm9ncmFtO1xyXG4gICAgbWV0YT86IFByb2dyYW07XHJcbiAgICBsb29waW5nOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgdGljazogbnVtYmVyO1xyXG4gICAgb2xkVGltZTogbnVtYmVyO1xyXG4gICAgbmV3VGltZTogbnVtYmVyO1xyXG4gICAgXHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBib3VuZHM6IFZlY3RvcjI7XHJcblxyXG4gICAgcHJpdmF0ZSBrZXlzRG93bjogSUtleXMgPSB7fTtcclxuICAgIHByaXZhdGUga2V5c1ByZXNzZWQ6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgbW91c2U6IFZlY3RvcjIgPSBWZWN0b3IyLnplcm8oKTtcclxuICAgIG1vdXNlTGVmdERvd246IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIG1vdXNlTGVmdFByZXNzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgbW91c2VMZWZ0UHJldjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIG1vdXNlUmlnaHREb3duOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBtb3VzZVJpZ2h0UHJlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBtb3VzZVJpZ2h0UHJldjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIG1vdXNlTWlkZGxlRG93bjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbW91c2VNaWRkbGVQcmVzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG1vdXNlTWlkZGxlUHJldjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHI6IFJlbmRlcmVyMlxyXG5cclxuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnRcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KVxyXG4gICAge1xyXG4gICAgICAgIC8vIHdpbmRvd1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSAwO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcclxuICAgICAgICB0aGlzLmJvdW5kcyA9IG5ldyBWZWN0b3IyKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KVxyXG4gICAgICAgIHRoaXMuc2V0V2luZG93KCk7XHJcbiAgICAgICAgLy8gd2luZG93Lm9ucmVzaXplID0gdGhpcy5zZXRXaW5kb3c7XHJcblxyXG4gICAgICAgIC8vIHJlbmRlcmluZ1xyXG4gICAgICAgIHRoaXMuciA9IG5ldyBSZW5kZXJlcjIoY2FudmFzLCB0aGlzKTsgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIHRpbWVcclxuICAgICAgICB0aGlzLnRpY2sgPSAwO1xyXG4gICAgICAgIHRoaXMub2xkVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdGhpcy5uZXdUaW1lID0gdGhpcy5vbGRUaW1lO1xyXG5cclxuICAgICAgICAvLyBtb3VzZVxyXG4gICAgICAgIGNhbnZhcy5vbm1vdXNlbW92ZSA9IHRoaXMuc2V0TW91c2VQb3MuYmluZCh0aGlzKTtcclxuICAgICAgICBjYW52YXMub25tb3VzZWRvd24gPSB0aGlzLnNldE1vdXNlRG93bi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbnZhcy5vbm1vdXNldXAgPSB0aGlzLnNldE1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgICAgICBjYW52YXMub25jb250ZXh0bWVudSA9IGZ1bmN0aW9uKGUpIHsgXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgXHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBrZXlib2FyZFxyXG4gICAgICAgIGNhbnZhcy5vbmtleWRvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIGNhbnZhcy5vbmtleXByZXNzID0gdGhpcy5vbktleVByZXNzZWQuYmluZCh0aGlzKTtcclxuICAgICAgICBjYW52YXMub25rZXl1cCA9IHRoaXMub25LZXlVcC5iaW5kKHRoaXMpO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMjIzIDtpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmtleXNEb3duW2ldID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYW52YXMuZm9jdXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAuLi5cclxuXHJcbiAgICBwdWJsaWMgbG9hZChnYW1lOiBQcm9ncmFtKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IGdhbWU7XHJcbiAgICAgICAgZ2FtZS5zdGFydCh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmxvb3BpbmcpXHJcbiAgICAgICAgICAgIHRoaXMubG9vcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsb2FkTWV0YShwcm9ncmFtOiBQcm9ncmFtKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWV0YSA9IHByb2dyYW07XHJcbiAgICAgICAgcHJvZ3JhbS5zdGFydCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgSXNLZXlEb3duKGtleTogc3RyaW5nKSA6IGJvb2xlYW5cclxuICAgIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXlzRG93bltrZXldOyAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIElzS2V5UHJlc3NlZChrZXk6IHN0cmluZykgOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5c1ByZXNzZWQuaW5jbHVkZXMoa2V5KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KVxyXG4gICAgeyBcclxuICAgICAgICBpZiAodGhpcy5rZXlzRG93bltlLmtleV0gPT0gdHJ1ZSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUua2V5KTtcclxuICAgICAgICB0aGlzLmtleXNEb3duW2Uua2V5LnRvTG93ZXJDYXNlKCldID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmtleXNQcmVzc2VkLnB1c2goZS5rZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbktleVVwKGU6IEtleWJvYXJkRXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5rZXlzRG93bltlLmtleS50b0xvd2VyQ2FzZSgpXSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbktleVByZXNzZWQoZTogS2V5Ym9hcmRFdmVudClcclxuICAgIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gLi4uXHJcblxyXG4gICAgcHJpdmF0ZSBsb29wKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmxvb3BpbmcgPSB0cnVlO1xyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAodGhpczogR2VvbikgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgdGltZVxyXG4gICAgICAgICAgICB0aGlzLm5ld1RpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0aGlzLnRpY2sgKz0gKHRoaXMubmV3VGltZSAtIHRoaXMub2xkVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMub2xkVGltZSA9IHRoaXMubmV3VGltZTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBtb3VzZVxyXG4gICAgICAgICAgICB0aGlzLm1vdXNlTGVmdFByZXNzZWQgPSAgKHRoaXMubW91c2VMZWZ0UHJldiAhPSB0aGlzLm1vdXNlTGVmdERvd24pICYmIHRoaXMubW91c2VMZWZ0RG93bjtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZVJpZ2h0UHJlc3NlZCA9ICAodGhpcy5tb3VzZVJpZ2h0UHJldiAhPSB0aGlzLm1vdXNlUmlnaHREb3duKSAmJiB0aGlzLm1vdXNlUmlnaHREb3duO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlUHJlc3NlZCA9ICAodGhpcy5tb3VzZU1pZGRsZVByZXYgIT0gdGhpcy5tb3VzZU1pZGRsZURvd24pICYmIHRoaXMubW91c2VNaWRkbGVEb3duO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnRQcmV2ID0gdGhpcy5tb3VzZUxlZnREb3duXHJcbiAgICAgICAgICAgIHRoaXMubW91c2VSaWdodFByZXYgPSB0aGlzLm1vdXNlUmlnaHREb3duXHJcbiAgICAgICAgICAgIHRoaXMubW91c2VNaWRkbGVQcmV2ID0gdGhpcy5tb3VzZU1pZGRsZURvd25cclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE8gOiBkb250IHVwZGF0ZSBpZiBub3RoaW5nIG1vdmVkICg/KVxyXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0hLnVwZGF0ZSh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuci5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyYW0hLmRyYXcodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgbWV0YXByb2dyYW0gYWZ0ZXJ3YXJkc1xyXG4gICAgICAgICAgICB0aGlzLm1ldGE/LnVwZGF0ZSh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5tZXRhPy5kcmF3KHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVmcmVzaCBrZXlwcmVzc2VzXHJcbiAgICAgICAgICAgIHRoaXMua2V5c1ByZXNzZWQgPSBbXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIENhbGwgdGhlIGdhbWUgbG9vcFxyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXAuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldE1vdXNlUG9zKGU6IE1vdXNlRXZlbnQpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gdGhpcyBpcyBhIGJpdCBtZXNzeSwgQlVULCBtdWx0aXBseSBieSBjYW1lcmEgcGFyYW1ldGVyc1xyXG4gICAgICAgIHRoaXMubW91c2UgPSB0aGlzLnIucmV2ZXJ0T2Zmc2V0KG5ldyBWZWN0b3IyKGUuY2xpZW50WCwgZS5jbGllbnRZKSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldE1vdXNlVXAoZTogTW91c2VFdmVudClcclxuICAgIHtcclxuICAgICAgICBsZXQgY29kZSA9IGUuYnV0dG9ucztcclxuICAgICAgICBpZiAoY29kZSA8IDQpIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZURvd24gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvZGUgPCAyKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VSaWdodERvd24gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvZGUgPCAxKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0RG93biA9IGZhbHNlO1xyXG4gICAgICAgIH0gXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRNb3VzZURvd24oZTogTW91c2VFdmVudClcclxuICAgIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBsZXQgY29kZSA9IGUuYnV0dG9ucztcclxuICAgICAgICBpZiAoY29kZSA+PSA0KSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvZGUgLT0gNDtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZURvd24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29kZSA+PSAyKSBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvZGUgLT0gMjtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZVJpZ2h0RG93biA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2RlID49IDEpIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29kZSAtPSAxO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlTGVmdERvd24gPSB0cnVlO1xyXG4gICAgICAgIH0gIFxyXG4gICAgICAgIHJldHVybiBmYWxzZTsgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0V2luZG93KClcclxuICAgIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInNldHRpbmcgd2luZG93Li4uXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggID0gdGhpcy5jYW52YXMud2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0ICsgXCJweFwiO1xyXG5cclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBuZXcgVmVjdG9yMih0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUtleXMgXHJcbntcclxuICAgIFtrZXk6IHN0cmluZ10gOiBib29sZWFuXHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmFtXHJcbntcclxuICAgIHN0YXJ0KGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gIGluaXQgZ2VvbWV0cnkgXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gdXBkYXRlIGdlb21ldHJ5XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGRyYXcgZ2VvbWV0cnlcclxuICAgIH1cclxuXHJcbiAgICBleGl0KGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZGVhbGxvY2F0ZSA/IGNsZWFuP1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBqdXN0IGEgZmxhZyBmb3Igbm93XHJcbmV4cG9ydCBjbGFzcyBNZXRhUHJvZ3JhbSBleHRlbmRzIFByb2dyYW1cclxue1xyXG5cclxufSIsImltcG9ydCB7IEdlb24gfSBmcm9tIFwiLi4vR2VvblwiO1xyXG5pbXBvcnQgeyBNZXRhUHJvZ3JhbSwgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgTGluZTIgfSBmcm9tIFwiLi4vZ2VvMi9saW5lMlwiO1xyXG5cclxuLy8gbWV0YXByb2dyYW1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3Rvck1ldGFQcm9ncmFtIGV4dGVuZHMgTWV0YVByb2dyYW1cclxue1xyXG4gICAgcHJvZ3JhbXM6IGFueVtdO1xyXG4gICAgY3VycmVudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBpc0FuaW1hdGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgYW5pbWF0aW9uQ291bnRlciA9IDE7XHJcbiAgICBjb21lYmFjayA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb2dyYW1zOiBhbnlbXSlcclxuICAgIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbXMgPSBwcm9ncmFtcztcclxuICAgICAgICBpZiAodGhpcy5wcm9ncmFtcy5sZW5ndGggPT0gMCkgdGhyb3cgXCJOZWVkIGF0IGxlYXN0IDEgcHJvZ3JhbSFcIjtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydChnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbXNbdGhpcy5jdXJyZW50XVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIC8vIGxpc3RlbiBmb3Iga2V5cHJlc3NlcyBcclxuICAgICAgICAvLyBzdHVwaWQgaSBrbm93LiBNb3JlIHNwZWNpZmljIGxpc3RlbmluZyB3b3VsZCBiZSBiZXR0ZXIuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKGdlb24uSXNLZXlQcmVzc2VkKGkudG9TdHJpbmcoKSkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJlcGFyZVN3YXBQcm9ncmFtKGkgLSAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2VvbjogR2VvbilcclxuICAgIHtcclxuICAgICAgICBjb25zdCBzcGVlZCA9IDAuMDE1O1xyXG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0aW5nKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uQ291bnRlciA+IDEpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnZW9uLnIuY2xlYXJGYWRlKDEgLSB0aGlzLmFuaW1hdGlvbkNvdW50ZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpb25Db3VudGVyID4gMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tZWJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db3VudGVyICs9IHNwZWVkO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkNvdW50ZXIgLT0gc3BlZWQ7XHJcbiAgICAgICAgICAgIH0gICBcclxuICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Db3VudGVyICs9IDAuMDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbWViYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dhcFByb2dyYW0oZ2Vvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBkcmF3IHRyYW5zaXRpb25zXHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZVN3YXBQcm9ncmFtKG51bTogbnVtYmVyKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChudW0gPCAwIHx8IG51bSA+PSB0aGlzLnByb2dyYW1zLmxlbmd0aCkgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5vIHByb2dyYW0gW1wiICsgbnVtLnRvU3RyaW5nKCkgKyBcIl0uXCIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9ICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3dhcHBpbmcgdG8gcHJvZ3JhbSBcIiArIG51bS50b1N0cmluZygpKTsgIFxyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIGZvciBhbmltYXRpb25cclxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudW07XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb21lYmFjayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uQ291bnRlciA9IDE7XHJcblxyXG4gICAgICAgIC8vIGxvYWRcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy8gZmFkZSBpblxyXG4gICAgfVxyXG5cclxuICAgIHN3YXBQcm9ncmFtKGdlb246IEdlb24pXHJcbiAgICB7XHJcbiAgICAgICAgZ2Vvbi5sb2FkKG5ldyB0aGlzLnByb2dyYW1zW3RoaXMuY3VycmVudF0oKSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCb3VuY2VCYWxsc1Byb2dyYW0gZXh0ZW5kcyBQcm9ncmFtXHJcbntcclxuICAgIHBvaW50czogVmVjdG9yMltdID0gW107XHJcbiAgICB2ZWN0b3JzOiBWZWN0b3IyW10gPSBbXTtcclxuXHJcbiAgICBjb3VudCA9IDEwMDtcclxuICAgIHNwZWVkID0gMjtcclxuXHJcbiAgICBzdGFydChnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5KHRoaXMuY291bnQpO1xyXG4gICAgICAgIHRoaXMudmVjdG9ycyA9IG5ldyBBcnJheSh0aGlzLmNvdW50KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCA7IGkgPCB0aGlzLmNvdW50OyBpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLnBvaW50c1tpXSA9IFZlY3RvcjIuZnJvbVJhbmRvbSgpLm11bChnZW9uLmJvdW5kcyk7XHJcbiAgICAgICAgICAgIHRoaXMudmVjdG9yc1tpXSA9IFZlY3RvcjIuZnJvbVJhbmRvbSgpLnN1YihuZXcgVmVjdG9yMigwLjUsIDAuNSkpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVkIGEgYnVuY2ggb2YgcG9pbnRzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwIDsgaSA8IHRoaXMuY291bnQ7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxldCBwID0gdGhpcy5wb2ludHNbaV07IFxyXG4gICAgICAgICAgICBsZXQgdiA9IHRoaXMudmVjdG9yc1tpXVxyXG5cclxuICAgICAgICAgICAgaWYgKGdlb24ubW91c2VMZWZ0RG93bilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gZGlzcnVwdCB0aGUgdmVjdG9yLCBiYXNlZCBvbiBob3cgY2xvc2VieSB0aGUgbW91c2UgaXNcclxuICAgICAgICAgICAgICAgIGxldCBkaXIgPSBWZWN0b3IyLmZyb20yUHQocCwgZ2Vvbi5tb3VzZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gZGlyLmxlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgZGlyLm5vcm1hbGl6ZSgpLnNjYWxlKE1hdGgubWluKDQsIDEwMCAvIGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgdi5hZGQoZGlyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcC5hZGQodik7XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVuZ3RoID0gdi5sZW5ndGgoKVxyXG4gICAgICAgICAgICBpZiAobGVuZ3RoID4gdGhpcy5zcGVlZClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdi5zZXRMZW5ndGgobGVuZ3RoICogMC45OSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGJvdW5jZSBhdCBlZGdlXHJcbiAgICAgICAgICAgIGlmIChwLnggPCAwIHx8IHAueCA+IGdlb24uYm91bmRzLngpIHYueCA9IC12Lng7XHJcbiAgICAgICAgICAgIGlmIChwLnkgPCAwIHx8IHAueSA+IGdlb24uYm91bmRzLnkpIHYueSA9IC12Lnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiBtb3VzZSBpcyBuZWFyYnksIG1vdmUgYXdheSBmcm9tIGl0XHJcbiAgICAgICAgaWYgKGdlb24ubW91c2VSaWdodFByZXNzZWQpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgMTAwOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2goVmVjdG9yMi5mcm9tUmFuZG9tKCkubXVsKGdlb24uYm91bmRzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlY3RvcnMucHVzaChWZWN0b3IyLmZyb21SYW5kb20oKS5zdWIobmV3IFZlY3RvcjIoMC41LCAwLjUpKS5ub3JtYWxpemUoKSk7XHJcbiAgICAgICAgICAgIH0gICAgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2VvbjogR2VvbilcclxuICAgIHsgXHJcbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaChwID0+IGdlb24uci5wb2ludChwLngsIHAueSkpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IGF0IG1vdXNlIHBvc2l0aW9uO1xyXG4gICAgICAgIGlmIChnZW9uLm1vdXNlTGVmdERvd24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBnZW9uLnIucG9pbnQoZ2Vvbi5tb3VzZS54LCBnZW9uLm1vdXNlLnkpO1xyXG4gICAgICAgIH0gIFxyXG4gICAgfVxyXG59IiwiLy8gYXV0aG9yIDogSm9zIEZlZW5zdHJhXHJcbi8vIFRPRE86IGV4dGVuZCBmcm9tIGEgZ2VuZXJpYyB0cmlhbmd1bGF0aW9uPyBtaWdodCBiZSBuaWNlIHRvIGhhdmVcclxuXHJcbmltcG9ydCB7IExpbmUyIH0gZnJvbSBcIi4vbGluZTJcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWxhdW5heSBcclxue1xyXG4gICAgcHJpdmF0ZSBwdHM6IFZlY3RvcjJbXTtcclxuICAgIHByaXZhdGUgdHJzOiBudW1iZXJbXVtdOyAvLyBJIFdBTlQgSU5URUdFUlMhXHJcblxyXG4gICAgcHJpdmF0ZSBjYzogVmVjdG9yMltdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnB0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMudHJzID0gW107XHJcbiAgICAgICAgdGhpcy5jYyA9IFtdO1xyXG5cclxuICAgICAgICAvLyBpbml0IGJpZyBiYXNlIHRyaWFuZ2xlXHJcbiAgICAgICAgdGhpcy5wdHMucHVzaChuZXcgVmVjdG9yMigtMTAwMDAsLTEwMDAwKSk7XHJcbiAgICAgICAgdGhpcy5wdHMucHVzaChuZXcgVmVjdG9yMigxMDAwMCwtMTAwMDApKTtcclxuICAgICAgICB0aGlzLnB0cy5wdXNoKG5ldyBWZWN0b3IyKDAsIDEwMDAwKSk7XHJcbiAgICAgICAgdGhpcy50cnMucHVzaChbMCwgMSwgMiwgLTEsIC0xICwgLTFdKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAuLi4gR2V0dGVycyBcclxuXHJcbiAgICBwdWJsaWMgZ2V0VmVydGljZXMoKVxyXG4gICAge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnB0cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RWRnZXMoKSA6IFZlY3RvcjJbXVxyXG4gICAge1xyXG4gICAgICAgIGxldCBlZGdlczogVmVjdG9yMltdID0gW107XHJcblxyXG4gICAgICAgIGZvcihsZXQgdHIgb2YgdGhpcy50cnMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgYSA9IHRoaXMucHRzW3RyWzBdXTtcclxuICAgICAgICAgICAgbGV0IGIgPSB0aGlzLnB0c1t0clsxXV07XHJcbiAgICAgICAgICAgIGxldCBjID0gdGhpcy5wdHNbdHJbMl1dO1xyXG5cclxuICAgICAgICAgICAgZWRnZXMucHVzaChhKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaChiKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaChhKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaChjKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaChiKTtcclxuICAgICAgICAgICAgZWRnZXMucHVzaChjKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlZGdlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2FsY3VsYXRlQ0MoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuY2MgPSB0aGlzLnRycy5tYXAodHIgPT4gXHJcbiAgICAgICAgICAgIFZlY3RvcjIuZnJvbUNpcmN1bWNlbnRlcih0aGlzLnB0c1t0clswXV0sIHRoaXMucHRzW3RyWzFdXSwgdGhpcy5wdHNbdHJbMl1dKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZvcm9ub2lFZGdlcyhjYWxjdWxhdGVDQyA9IGZhbHNlKSA6IFZlY3RvcjJbXVxyXG4gICAge1xyXG4gICAgICAgIGxldCBlZGdlczogVmVjdG9yMltdID0gW107XHJcblxyXG4gICAgICAgIGlmIChjYWxjdWxhdGVDQyB8fCB0aGlzLmNjLmxlbmd0aCAhPSB0aGlzLnRycy5sZW5ndGgpXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlQ0MoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBwZXIgbmIgcmVsYXRpb24gOiBpZiBpdHMgbm90IC0xIDogYnVpbGQgYW4gZWRnZSBiZXR3ZWVuIG5iIGNjJ3MuIFxyXG4gICAgICAgIGZvcihsZXQgaSA9IDAgOyBpIDwgdGhpcy50cnMubGVuZ3RoIDtpKyspXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdHJpYW5nbGUgPSB0aGlzLnRyc1tpXTtcclxuICAgICAgICAgICAgZm9yKGxldCBpaSA9IDM7IGlpIDwgNjsgaWkrKylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5iID0gdHJpYW5nbGVbaWldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5iID09IC0xKSBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGVkZ2VzLnB1c2godGhpcy5jY1tpXSk7XHJcbiAgICAgICAgICAgICAgICBlZGdlcy5wdXNoKHRoaXMuY2NbbmJdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWRnZXM7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIC4uLiBJbnRlcmZhY2VcclxuXHJcbiAgICBwdWJsaWMgSW5zZXJ0KGluc2VydGlvbjogVmVjdG9yMikgOiBib29sZWFuXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZG9udCBpbnNlcnQgaWYgdG9vIHNpbWlsYXIgdG8gZXhpc3RpbmcgXHJcbiAgICAgICAgaWYgKHRoaXMucHRzLnNvbWUodiA9PiBpbnNlcnRpb24ucm91Z2hseUVxdWFscyh2LCAwLjEpKSlcclxuICAgICAgICAgICAgeyBjb25zb2xlLmxvZyhcInRvIGNsb3NlIHRvIGV4aXN0aW5nIHBvaW50XCIpOyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbiAgICAgICAgLy8gYWRkIGl0XHJcbiAgICAgICAgY29uc3QgaW5JRCA9IHRoaXMucHRzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLnB0cy5wdXNoKGluc2VydGlvbik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gZ2V0IHRyaWFuZ2xlIGFuZCBJRCB2YWx1ZXNcclxuICAgICAgICBjb25zdCB0cklEID0gdGhpcy5zZWxlY3RUcmlhbmdsZShpbnNlcnRpb24pO1xyXG4gICAgICAgIGlmICh0cklEID09IC0xKVxyXG4gICAgICAgICAgICB7IGNvbnNvbGUubG9nKFwidHJpYW5nbGUgd2FsayBmYWlsZWRcIik7IHJldHVybiBmYWxzZTsgfVxyXG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy50cnNbdHJJRF07ICBcclxuXHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxfYV9JRCA9IHRyWzBdO1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsX2JfSUQgPSB0clsxXTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbF9jX0lEID0gdHJbMl07XHJcblxyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsX2JjSUQgPSB0clszXTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbF9jYUlEID0gdHJbNF07XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxfYWJJRCA9IHRyWzVdO1xyXG5cclxuICAgICAgICBjb25zdCBhYklEID0gdHJJRDtcclxuICAgICAgICBjb25zdCBiY0lEID0gdGhpcy50cnMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGNhSUQgPSB0aGlzLnRycy5sZW5ndGggKyAxO1xyXG5cclxuICAgICAgICAvLyBlZGl0IDEgdHJpYW5nbGUsIGFkZCAyIG5ldyBvbmVzIFxyXG4gICAgICAgIHRoaXMudHJzW3RySURdID0gW29yaWdpbmFsX2FfSUQsIG9yaWdpbmFsX2JfSUQsIGluSUQsIGJjSUQsIGNhSUQsIG9yaWdpbmFsX2FiSURdOyBcclxuICAgICAgICB0aGlzLnRycy5wdXNoKCAgIFtvcmlnaW5hbF9iX0lELCBvcmlnaW5hbF9jX0lELCBpbklELCBjYUlELCBhYklELCBvcmlnaW5hbF9iY0lEXSk7XHJcbiAgICAgICAgdGhpcy50cnMucHVzaCggICBbb3JpZ2luYWxfY19JRCwgb3JpZ2luYWxfYV9JRCwgaW5JRCwgYWJJRCwgYmNJRCwgb3JpZ2luYWxfY2FJRF0pO1xyXG5cclxuICAgICAgICAvLyBmaXggdG9wb2xvZ3lcclxuICAgICAgICB0aGlzLnJlcGxhY2VOZWlnaGJvcihvcmlnaW5hbF9iY0lELCB0cklELCBiY0lEKTtcclxuICAgICAgICB0aGlzLnJlcGxhY2VOZWlnaGJvcihvcmlnaW5hbF9jYUlELCB0cklELCBjYUlEKTtcclxuICAgICAgICB0aGlzLm1ha2VEZWxhdW5heShbYWJJRCwgYmNJRCwgY2FJRF0sIGluSUQpXHJcblxyXG4gICAgICAgIC8vIHN1Y2NlcyFcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAuLi4gVXRpbFxyXG5cclxuICAgIC8vIHN0b3JlIHRoZSBsYXN0IHRyaWFuZ2xlXHJcbiAgICBwcml2YXRlIHdhbGtDdXJzb3IgPSAwO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RUcmlhbmdsZSh0YXJnZXQ6IFZlY3RvcjIpIDogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgLy8gc2VsZWN0IGEgdHJpYW5nbGUgYmFzZWQgb24gYSB3YWxraW5nIHRyaWFuZ2xlIGFsZ29yaXRobVxyXG4gICAgICAgIGNvbnN0IGNvbWJpbmF0aW9ucyA9IFtbMCwxLDJdLCBbMSwyLDBdLCBbMiwwLDFdXSBcclxuICAgICAgICBsZXQgdHJJRCA9IHRoaXMud2Fsa0N1cnNvcjtcclxuICAgICAgICBmb3IgKGxldCBfID0gMDsgXyA8IHRoaXMudHJzLmxlbmd0aDsgXysrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgYyBvZiBjb21iaW5hdGlvbnMpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cklEID09IC0xKSBcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2lnbiA9IFZlY3RvcjIuZ2V0U2lnbihcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsIFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHRzW3RoaXMudHJzW3RySURdW2NbMF1dXSwgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdHNbdGhpcy50cnNbdHJJRF1bY1sxXV1dKTtcclxuICAgICAgICAgICAgICAgIGlmIChzaWduIDwgMClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0cklEID0gdGhpcy5nZXROZWlnaGJvclRyaWFuZ2xlKHRySUQsIHRoaXMudHJzW3RySURdW2NbMl1dKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY1swXSA9PSAyKVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2Fsa0N1cnNvciA9IHRySUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRySUQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRvbyBtYW55IHN0ZXBzIGhhdmUgYmVlbiB0YWtlblxyXG4gICAgICAgIHRoaXMud2Fsa0N1cnNvciA9IDA7XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZURlbGF1bmF5KHRySURTOiBudW1iZXJbXSwgaW5JRDpudW1iZXIpXHJcbiAgICB7XHJcbiAgICAgICAgLy8gZmxpcCB1bnRpbCBncmFwaCBpcyBkZWxhdW5heVxyXG4gICAgICAgIHdoaWxlKHRySURTLmxlbmd0aCA+IDApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgdHJJRCA9IHRySURTLnBvcCgpITtcclxuICAgICAgICAgICAgbGV0IHRyID0gdGhpcy50cnNbdHJJRF07XHJcbiAgICAgICAgICAgIGxldCBuYklEID0gdGhpcy5nZXROZWlnaGJvclRyaWFuZ2xlKHRySUQsIGluSUQpO1xyXG4gICAgICAgICAgICBpZiAobmJJRCA9PSAtMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBsZXQgcUlEID0gdGhpcy5nZXROZWlnaGJvclBvaW50KG5iSUQsIHRySUQpO1xyXG4gICAgICAgICAgICBsZXQgcSA9IHRoaXMucHRzW3FJRF07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBsZXQgYyA9IFZlY3RvcjIuZnJvbUNpcmN1bWNlbnRlcih0aGlzLnB0c1t0clswXV0sIHRoaXMucHRzW3RyWzFdXSwgdGhpcy5wdHNbdHJbMl1dKTtcclxuICAgICAgICAgICAgLy8gaWYgKCFjLmVxdWFscyhWZWN0b3IyLk5hTigpKSAmJiBjLmRpc1RvKHEpIDwgYy5kaXNUbyh0aGlzLnB0c1t0clswXV0pKVxyXG4gICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgIC8vICAgICAvLyBmbGlwIVxyXG5cclxuICAgICAgICAgICAgLy8gICAgIC8vIHBvaW50cyBwLCBxLCByIGFuZCBzXHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCByID0gdHJbMF07XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBzID0gdHJbMV07XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gICAgIC8vIGZvcmVpZ24gbmVpZ2hib3JzIFxyXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgZm5iXzEgPSB0aGlzLmdldE5laWdoYm9yVHJpYW5nbGUodHJJRCwgcik7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBmbmJfMiA9IHRoaXMuZ2V0TmVpZ2hib3JUcmlhbmdsZSh0cklELCBzKTtcclxuICAgICAgICAgICAgLy8gICAgIGNvbnN0IGZuYl8zID0gdGhpcy5nZXROZWlnaGJvclRyaWFuZ2xlKG5iSUQsIHIpO1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3QgZm5iXzQgPSB0aGlzLmdldE5laWdoYm9yVHJpYW5nbGUobmJJRCwgcyk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAuLi4gSGVscGVyc1xyXG5cclxuICAgIHByaXZhdGUgcmVwbGFjZU5laWdoYm9yKHRySUQ6IG51bWJlciwgbmJPbGQ6IG51bWJlciwgbmJOZXc6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICAvLyB0aGVyZSBhcmUgcHJldHRpZXIgd2F5cywgYnV0IHRoaXMgaXMgZmFzdFxyXG4gICAgICAgIGlmICh0cklEID09IC0xKSByZXR1cm47XHJcbiAgICAgICAgaWYoICAgICAgdGhpcy50cnNbdHJJRF1bM10gPT0gbmJPbGQpICB0aGlzLnRyc1t0cklEXVszXSA9IG5iTmV3O1xyXG4gICAgICAgIGVsc2UgaWYoIHRoaXMudHJzW3RySURdWzRdID09IG5iT2xkKSAgdGhpcy50cnNbdHJJRF1bNF0gPSBuYk5ldztcclxuICAgICAgICBlbHNlIGlmKCB0aGlzLnRyc1t0cklEXVs1XSA9PSBuYk9sZCkgIHRoaXMudHJzW3RySURdWzVdID0gbmJOZXc7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlcGxhY2UgbmVpZ2hib3IgZmFpbGVkIVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldE5laWdoYm9yVHJpYW5nbGUodHJpYW5nbGVJRDogbnVtYmVyLCBwb2ludElEOiBudW1iZXIpIDogbnVtYmVyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy50cnNbdHJpYW5nbGVJRF0uaW5kZXhPZihwb2ludElEKSArIDNcclxuICAgICAgICByZXR1cm4gdGhpcy50cnNbdHJpYW5nbGVJRF1baW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0TmVpZ2hib3JQb2ludCh0cmlhbmdsZUlEOiBudW1iZXIsIG5laWdoYm9ySUQ6IG51bWJlcikgOiBudW1iZXJcclxuICAgIHtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLnRyc1t0cmlhbmdsZUlEXS5pbmRleE9mKG5laWdoYm9ySUQpIC0gM1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyc1t0cmlhbmdsZUlEXVtpbmRleF07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9tYXRoL1ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmFtSGVscGVyc1xyXG57XHJcbiAgICBzdGF0aWMgZ2V0TW92ZW1lbnRWZWN0b3IoZ2VvbjogR2VvbiwgbWluc3BlZWQ6IG51bWJlciwgbWF4c3BlZWQ6IG51bWJlcikgOiBWZWN0b3IyXHJcbiAgICB7XHJcbiAgICAgICAgbGV0IHNwZWVkID0gbWluc3BlZWQ7XHJcbiAgICAgICAgbGV0IHZlbG9jaXR5ID0gIG5ldyBWZWN0b3IyKDAsMCk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwic2hpZnRcIikpXHJcbiAgICAgICAgICAgIHNwZWVkID0gbWF4c3BlZWQ7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3d1cFwiKSB8fCBnZW9uLklzS2V5RG93bihcIndcIikpXHJcbiAgICAgICAgICAgIHZlbG9jaXR5LmFkZChuZXcgVmVjdG9yMigwLCAxKSk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3dkb3duXCIpIHx8IGdlb24uSXNLZXlEb3duKFwic1wiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKG5ldyBWZWN0b3IyKDAsIC0xKSk7XHJcbiAgICAgICAgaWYgKGdlb24uSXNLZXlEb3duKFwiYXJyb3dsZWZ0XCIpIHx8IGdlb24uSXNLZXlEb3duKFwiYVwiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKG5ldyBWZWN0b3IyKDEsIDApKTtcclxuICAgICAgICBpZiAoZ2Vvbi5Jc0tleURvd24oXCJhcnJvd3JpZ2h0XCIpIHx8IGdlb24uSXNLZXlEb3duKFwiZFwiKSlcclxuICAgICAgICAgICAgdmVsb2NpdHkuYWRkKCBuZXcgVmVjdG9yMigtMSwgMCkpO1xyXG4gICAgICAgIHJldHVybiB2ZWxvY2l0eS5zZXRMZW5ndGgoc3BlZWQpO1xyXG4gICAgfVxyXG59XHJcbiAgICBcclxuICAgIFxyXG4iLCJpbXBvcnQgeyBHZW9uIH0gZnJvbSBcIi4uL0dlb25cIjtcclxuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gXCIuL1Byb2dyYW1cIjtcclxuXHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vbWF0aC9WZWN0b3IyXCI7XHJcbmltcG9ydCB7IExpbmUyIH0gZnJvbSBcIi4uL2dlbzIvbGluZTJcIjtcclxuaW1wb3J0IHsgRGVsYXVuYXkgfSBmcm9tIFwiLi4vZ2VvMi9EZWxhdW5heVwiO1xyXG5pbXBvcnQgeyBQcm9ncmFtSGVscGVycyB9IGZyb20gXCIuL1Byb2dyYW1IZWxwZXJzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVm9yb25vaVByb2dyYW0gZXh0ZW5kcyBQcm9ncmFtXHJcbntcclxuICAgIGR0ID0gbmV3IERlbGF1bmF5KCk7XHJcbiAgICBzd2l0Y2ggPSAwO1xyXG5cclxuICAgIHN0YXJ0KGdlb246IEdlb24pXHJcbiAgICB7IFxyXG4gICAgICAgIHRoaXMuZHQuSW5zZXJ0KG5ldyBWZWN0b3IyKGdlb24ud2lkdGggLyAyLCBnZW9uLmhlaWdodCAvIDIpKVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShnZW9uOiBHZW9uKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChnZW9uLm1vdXNlUmlnaHRQcmVzc2VkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGV0IGluc2VydGlvbiA9IFZlY3RvcjIuZnJvbUNvcHkoZ2Vvbi5tb3VzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZHQuSW5zZXJ0KGluc2VydGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ2Vvbi5Jc0tleVByZXNzZWQoJ2gnKSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoICs9IDE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN3aXRjaCA+IDIpIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2ggPSAwOyAgIFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIGNhbWVyYVxyXG4gICAgICAgIGxldCB2ZWwgPSBQcm9ncmFtSGVscGVycy5nZXRNb3ZlbWVudFZlY3RvcihnZW9uLCAyIC8gZ2Vvbi5yLnNjYWxlLCA1IC8gZ2Vvbi5yLnNjYWxlKTtcclxuICAgICAgICBnZW9uLnIub2Zmc2V0LmFkZCh2ZWwpO1xyXG4gICAgICAgIGlmIChnZW9uLklzS2V5UHJlc3NlZCgncScpKVxyXG4gICAgICAgICAgICBnZW9uLnIuc2NhbGUgKj0gMS41O1xyXG4gICAgICAgIGlmIChnZW9uLklzS2V5UHJlc3NlZCgnZScpKVxyXG4gICAgICAgICAgICBnZW9uLnIuc2NhbGUgKj0gMC41O1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoZ2VvbjogR2VvbilcclxuICAgIHtcclxuICAgICAgICBnZW9uLnIucG9pbnRzKHRoaXMuZHQuZ2V0VmVydGljZXMoKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuc3dpdGNoID09IDEpXHJcbiAgICAgICAgICAgIGdlb24uci5saW5lU2VnbWVudHModGhpcy5kdC5nZXRFZGdlcygpKTtcclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN3aXRjaCA9PSAyKVxyXG4gICAgICAgICAgICBnZW9uLnIubGluZVNlZ21lbnRzKHRoaXMuZHQuZ2V0Vm9yb25vaUVkZ2VzKCkpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2VvbiB9IGZyb20gXCIuL0dlb25cIjtcclxuXHJcbmltcG9ydCB7IFNlbGVjdG9yTWV0YVByb2dyYW0gfSBmcm9tIFwiLi9wcm9ncmFtcy9TZWxlY3RvclwiO1xyXG5cclxuaW1wb3J0IHsgQm91bmNlQmFsbHNQcm9ncmFtIH0gZnJvbSBcIi4vcHJvZ3JhbXMvQm91bmNlQmFsbHNcIjtcclxuaW1wb3J0IHsgVm9yb25vaVByb2dyYW0gfSBmcm9tIFwiLi9wcm9ncmFtcy92b3Jvbm9pUHJvZ3JhbVwiO1xyXG5cclxuY29uc3QgcHJvZ3JhbXM6IGFueVtdID0gXHJcbltcclxuICAgIEJvdW5jZUJhbGxzUHJvZ3JhbSxcclxuICAgIFZvcm9ub2lQcm9ncmFtXHJcbl07XHJcbmNvbnN0IG1ldGEgPSBuZXcgU2VsZWN0b3JNZXRhUHJvZ3JhbShwcm9ncmFtcyk7XHJcblxyXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSEgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbmNvbnN0IGdlb24gPSBuZXcgR2VvbihjYW52YXMpO1xyXG5nZW9uLmxvYWRNZXRhKG1ldGEpOyAgICAgICAgICAgICAvLyBwcm9ncmFtIHNlbGVjdG9yXHJcbmdlb24ubG9hZChuZXcgVm9yb25vaVByb2dyYW0oKSk7IC8vIGZpcnN0IHByb2dyYW0gdG8gbG9hZCBcclxuXHJcblxyXG5jb25zb2xlLmxvZyhcImV2ZXJ5dGhpbmcgbG9hZGVkLlwiKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///101\n')})();