(()=>{"use strict";eval('\n// CONCATENATED MODULE: ./src/math/Vector2.ts\n// author: Jos Feenstra\r\n// inspiration from Three.js\r\n// note: recycle the class as much as possble, building a new class is expensive,\r\n// especially in javascript\r\nclass Vector2 {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    // --- factories & other statics\r\n    static fromLerp(v1, v2, alpha) {\r\n        return new Vector2(v1.x + (v2.x - v1.x) * alpha, v1.y + (v2.y - v1.y) * alpha);\r\n    }\r\n    static fromRandom() {\r\n        return new Vector2(Math.random(), Math.random());\r\n    }\r\n    static fromRandomAngle() {\r\n        let alpha = Math.random() * Math.PI * 2;\r\n        return new Vector2(Math.cos(alpha), Math.sin(alpha));\r\n    }\r\n    static from2Pt(from, to) {\r\n        return new Vector2(from.x - to.x, from.y - to.y);\r\n    }\r\n    static fromCopy(other) {\r\n        return this.zero().copy(other);\r\n    }\r\n    static zero() { return new Vector2(0, 0); }\r\n    static NaN() { return new Vector2(NaN, NaN); }\r\n    static fromCircumcenter(a, b, c) {\r\n        const asum = a.squareSum();\r\n        const bsum = b.squareSum();\r\n        const csum = c.squareSum();\r\n        // sort of cross product\r\n        let d = 2 * (a.x * (b.y - c.y) +\r\n            b.x * (c.y - a.y) +\r\n            c.x * (a.y - b.y));\r\n        // if this triangle has no circumcenter? \r\n        if (d < 0.000001)\r\n            return Vector2.NaN();\r\n        let x = (asum * (b.y - c.y) +\r\n            bsum * (c.y - a.y) +\r\n            csum * (a.y - b.y)) / d;\r\n        let y = (asum * (c.x - b.x) +\r\n            bsum * (a.x - c.x) +\r\n            csum * (b.x - a.x)) / d;\r\n        return new Vector2(x, y);\r\n    }\r\n    static getSign(a, b, c) {\r\n        // test half plane relationship\r\n        // <0 : point on first half\r\n        // 0  : points collinear\r\n        // >0 : point on second half \r\n        return (a.x - c.x) * (b.y - c.y) -\r\n            (b.x - c.x) * (a.y - c.y);\r\n    }\r\n    // --- basics\r\n    set(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    roughlyEquals(v, tol) {\r\n        return (Math.abs(this.x - v.x) < tol &&\r\n            Math.abs(this.y - v.y) < tol);\r\n    }\r\n    equals(v) {\r\n        return ((v.x === this.x) && (v.y === this.y));\r\n    }\r\n    toString() {\r\n        return `Vector3(${this.x}, ${this.y})`;\r\n    }\r\n    clone() {\r\n        return new Vector2(this.x, this.y);\r\n    }\r\n    copy(v) {\r\n        this.x = v.x;\r\n        this.y = v.y;\r\n        return this;\r\n    }\r\n    // --- math\r\n    add(v) {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        return this;\r\n    }\r\n    sub(v) {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        return this;\r\n    }\r\n    mul(v) {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        return this;\r\n    }\r\n    scale(v) {\r\n        this.x *= v;\r\n        this.y *= v;\r\n        return this;\r\n    }\r\n    div(v) {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        return this;\r\n    }\r\n    divscale(v) {\r\n        this.x /= v;\r\n        this.y /= v;\r\n        return this;\r\n    }\r\n    min(other) {\r\n        this.x = Math.min(this.x, other.x);\r\n        this.y = Math.min(this.y, other.y);\r\n        return this;\r\n    }\r\n    max(other) {\r\n        this.x = Math.max(this.x, other.x);\r\n        this.y = Math.max(this.y, other.y);\r\n        return this;\r\n    }\r\n    clamp(min, max) {\r\n        // assumes min < max, componentwise\r\n        this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n        this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n        return this;\r\n    }\r\n    clampScalar(minVal, maxVal) {\r\n        this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n        this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n        return this;\r\n    }\r\n    clampLength(min, max) {\r\n        const length = this.length();\r\n        return this.divscale(length || 1).scale(Math.max(min, Math.min(max, length)));\r\n    }\r\n    floor() {\r\n        this.x = Math.floor(this.x);\r\n        this.y = Math.floor(this.y);\r\n        return this;\r\n    }\r\n    ceil() {\r\n        this.x = Math.ceil(this.x);\r\n        this.y = Math.ceil(this.y);\r\n        return this;\r\n    }\r\n    round() {\r\n        this.x = Math.round(this.x);\r\n        this.y = Math.round(this.y);\r\n        return this;\r\n    }\r\n    roundToZero() {\r\n        this.x = (this.x < 0) ? Math.ceil(this.x) : Math.floor(this.x);\r\n        this.y = (this.y < 0) ? Math.ceil(this.y) : Math.floor(this.y);\r\n        return this;\r\n    }\r\n    negate() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this;\r\n    }\r\n    dot(v) {\r\n        return this.x * v.x + this.y * v.y;\r\n    }\r\n    cross(v) {\r\n        return this.x * v.y - this.y * v.x; // ????\r\n    }\r\n    squareSum() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    length() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n    manhat() {\r\n        return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n    normalize() {\r\n        return this.divscale(this.length() || 1);\r\n    }\r\n    angle() {\r\n        // computes the angle in radians with respect to the positive x-axis\r\n        const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n        return angle;\r\n    }\r\n    disTo(v) {\r\n        return Math.sqrt(this.disToSquared(v));\r\n    }\r\n    disToSquared(v) {\r\n        const dx = this.x - v.x, dy = this.y - v.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n    disToManhat(v) {\r\n        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n    setLength(length) {\r\n        return this.normalize().scale(length);\r\n    }\r\n    lerp(other, alpha) {\r\n        this.x += (other.x - this.x) * alpha;\r\n        this.y += (other.y - this.y) * alpha;\r\n        return this;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/2D/Renderer2.ts\n// author: Jos Feenstra\r\n\r\n// only renderer talks to ctx & canvas.\r\n// do all the camera work in here\r\nclass Renderer2 {\r\n    constructor(canvas, geon) {\r\n        // visuals\r\n        this.slowfade = false;\r\n        this.pointsize = 5;\r\n        this.pointcolor = "#ffffff";\r\n        this.linecolor = "#ffffff";\r\n        this.fillcolor = "#666666";\r\n        this.geon = geon;\r\n        this.ctx = canvas.getContext("2d");\r\n        this.offset = Vector2.zero();\r\n        this.scale = 1;\r\n        this.ctx.fillStyle = this.pointcolor;\r\n        this.ctx.strokeStyle = this.linecolor;\r\n    }\r\n    reset() {\r\n        this.slowfade = false;\r\n        this.offset = Vector2.zero();\r\n        this.scale = 1;\r\n        this.ctx.fillStyle = this.pointcolor;\r\n        this.ctx.strokeStyle = this.linecolor;\r\n    }\r\n    // TODO fix this once i build matrices\r\n    applyOffset(v) {\r\n        return v.clone().add(this.offset).scale(this.scale);\r\n    }\r\n    revertOffset(v) {\r\n        return v.clone().scale(1 / this.scale).sub(this.offset);\r\n    }\r\n    // this clears with a transparant layer, for easy delayed effect\r\n    clearFade(alpha) {\r\n        // adjust color settings\r\n        const color = this.ctx.fillStyle;\r\n        this.ctx.fillStyle = "#000000ff";\r\n        this.ctx.globalAlpha = alpha;\r\n        this.ctx.fillRect(0, 0, this.geon.width, this.geon.height);\r\n        // reset color settings \r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.fillStyle = color;\r\n    }\r\n    clear() {\r\n        if (this.slowfade)\r\n            this.clearFade(0.1);\r\n        else\r\n            this.ctx.clearRect(0, 0, this.geon.width, this.geon.height);\r\n    }\r\n    point(x, y) {\r\n        // todo camera\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, this.pointsize, 0, Math.PI * 2, false);\r\n        this.ctx.fill();\r\n    }\r\n    points(points) {\r\n        // TODO dont draw if off screen\r\n        for (let i = 0; i < points.length; i++) {\r\n            this.ctx.beginPath();\r\n            let v = this.applyOffset(points[i]);\r\n            this.ctx.arc(v.x, v.y, this.pointsize, 0, Math.PI * 2, false);\r\n            this.ctx.fill();\r\n        }\r\n    }\r\n    line(line) {\r\n        // TODO dont draw if off screen\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(line.from.x, line.from.y);\r\n        this.ctx.lineTo(line.to.x, line.to.y);\r\n        this.ctx.stroke();\r\n    }\r\n    lineSegments(vertices) {\r\n        this.ctx.beginPath();\r\n        for (let i = 0; i < vertices.length; i += 2) {\r\n            let ii = i + 1;\r\n            let v1 = this.applyOffset(vertices[i]);\r\n            let v2 = this.applyOffset(vertices[ii]);\r\n            this.ctx.moveTo(v1.x, v1.y);\r\n            this.ctx.lineTo(v2.x, v2.y);\r\n        }\r\n        this.ctx.stroke();\r\n    }\r\n    circles(points, radii) {\r\n        // TODO dont draw if off screen\r\n        for (let i = 0; i < points.length; i++) {\r\n            this.ctx.beginPath();\r\n            let v = this.applyOffset(points[i]);\r\n            let r = radii[i] * this.scale;\r\n            this.ctx.arc(v.x, v.y, r, 0, Math.PI * 2, false);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n    text(message, pos) {\r\n        this.ctx.font = \'14px "Lucida Console", Monaco, monospace\';\r\n        this.ctx.fillText(message, pos.x, pos.y);\r\n    }\r\n    rectangle() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n    polygon() {\r\n        this.ctx.beginPath();\r\n        this.ctx.fill();\r\n        this.ctx.stroke();\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Geon.ts\n\r\n\r\nclass Geon {\r\n    constructor(canvas) {\r\n        this.looping = false;\r\n        this.keysDown = {};\r\n        this.keysPressed = [];\r\n        this.mouse = Vector2.zero();\r\n        this.worldMouse = Vector2.zero();\r\n        this.mouseLeftDown = false;\r\n        this.mouseLeftPressed = false;\r\n        this.mouseLeftPrev = false;\r\n        this.mouseRightDown = false;\r\n        this.mouseRightPressed = false;\r\n        this.mouseRightPrev = false;\r\n        this.mouseMiddleDown = false;\r\n        this.mouseMiddlePressed = false;\r\n        this.mouseMiddlePrev = false;\r\n        // window\r\n        this.canvas = canvas;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n        this.setWindow();\r\n        // window.onresize = this.setWindow;\r\n        // rendering\r\n        this.r = new Renderer2(canvas, this);\r\n        // time\r\n        this.tick = 0;\r\n        this.oldTime = Date.now();\r\n        this.newTime = this.oldTime;\r\n        // mouse\r\n        canvas.onmousemove = this.setMousePos.bind(this);\r\n        canvas.onmousedown = this.setMouseDown.bind(this);\r\n        canvas.onmouseup = this.setMouseUp.bind(this);\r\n        canvas.oncontextmenu = function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n        };\r\n        // keyboard\r\n        canvas.onkeydown = this.onKeyDown.bind(this);\r\n        canvas.onkeypress = this.onKeyPressed.bind(this);\r\n        canvas.onkeyup = this.onKeyUp.bind(this);\r\n        for (let i = 0; i < 223; i++) {\r\n            this.keysDown[i] = false;\r\n        }\r\n        canvas.focus();\r\n    }\r\n    // ...\r\n    load(game) {\r\n        this.r.reset();\r\n        this.program = game;\r\n        game.start(this);\r\n        if (!this.looping)\r\n            this.loop();\r\n    }\r\n    loadMeta(program) {\r\n        this.meta = program;\r\n        program.start(this);\r\n    }\r\n    IsKeyDown(key) {\r\n        return this.keysDown[key];\r\n    }\r\n    IsKeyPressed(key) {\r\n        return this.keysPressed.includes(key);\r\n    }\r\n    onKeyDown(e) {\r\n        if (this.keysDown[e.key] == true)\r\n            return;\r\n        console.log(e.key);\r\n        this.keysDown[e.key.toLowerCase()] = true;\r\n        this.keysPressed.push(e.key);\r\n    }\r\n    onKeyUp(e) {\r\n        this.keysDown[e.key.toLowerCase()] = false;\r\n    }\r\n    onKeyPressed(e) {\r\n    }\r\n    // ...\r\n    loop() {\r\n        this.looping = true;\r\n        function step() {\r\n            var _a, _b;\r\n            // update time\r\n            this.newTime = Date.now();\r\n            this.tick = (this.newTime - this.oldTime);\r\n            this.oldTime = this.newTime;\r\n            // update mouse\r\n            this.mouseLeftPressed = (this.mouseLeftPrev != this.mouseLeftDown) && this.mouseLeftDown;\r\n            this.mouseRightPressed = (this.mouseRightPrev != this.mouseRightDown) && this.mouseRightDown;\r\n            this.mouseMiddlePressed = (this.mouseMiddlePrev != this.mouseMiddleDown) && this.mouseMiddleDown;\r\n            this.mouseLeftPrev = this.mouseLeftDown;\r\n            this.mouseRightPrev = this.mouseRightDown;\r\n            this.mouseMiddlePrev = this.mouseMiddleDown;\r\n            // TODO : dont update if nothing moved (?)\r\n            this.program.update(this);\r\n            this.r.clear();\r\n            this.program.draw(this);\r\n            // update metaprogram afterwards\r\n            (_a = this.meta) === null || _a === void 0 ? void 0 : _a.update(this);\r\n            (_b = this.meta) === null || _b === void 0 ? void 0 : _b.draw(this);\r\n            // refresh keypresses\r\n            this.keysPressed = [];\r\n            // Call the game loop\r\n            window.requestAnimationFrame(step.bind(this));\r\n        }\r\n        window.requestAnimationFrame(step.bind(this));\r\n    }\r\n    setMousePos(e) {\r\n        // this is a bit messy, BUT, multiply by camera parameters\r\n        this.mouse = new Vector2(e.clientX, e.clientY);\r\n        this.worldMouse = this.r.revertOffset(this.mouse);\r\n    }\r\n    setMouseUp(e) {\r\n        let code = e.buttons;\r\n        if (code < 4) {\r\n            this.mouseMiddleDown = false;\r\n        }\r\n        if (code < 2) {\r\n            this.mouseRightDown = false;\r\n        }\r\n        if (code < 1) {\r\n            this.mouseLeftDown = false;\r\n        }\r\n    }\r\n    setMouseDown(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        let code = e.buttons;\r\n        if (code >= 4) {\r\n            code -= 4;\r\n            this.mouseMiddleDown = true;\r\n        }\r\n        if (code >= 2) {\r\n            code -= 2;\r\n            this.mouseRightDown = true;\r\n        }\r\n        if (code >= 1) {\r\n            code -= 1;\r\n            this.mouseLeftDown = true;\r\n        }\r\n        return false;\r\n    }\r\n    setWindow() {\r\n        console.log("setting window...");\r\n        this.canvas.width = document.body.clientWidth;\r\n        this.canvas.height = document.body.clientHeight;\r\n        this.canvas.style.width = this.canvas.width + "px";\r\n        this.canvas.style.height = this.canvas.height + "px";\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.bounds = new Vector2(this.width, this.height);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/Program.ts\nclass Program {\r\n    constructor() {\r\n        this.title = "";\r\n        this.description = "";\r\n    }\r\n    start(geon) {\r\n        //  init geometry \r\n    }\r\n    update(geon) {\r\n        // update geometry\r\n    }\r\n    draw(geon) {\r\n        // draw geometry\r\n    }\r\n    exit(geon) {\r\n        // deallocate ? clean?\r\n    }\r\n}\r\n// just a flag for now\r\nclass MetaProgram extends Program {\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/SelectorMetaProgram.ts\n\r\n\r\n// metaprogram\r\nclass SelectorMetaProgram extends MetaProgram {\r\n    constructor(programs) {\r\n        super();\r\n        this.current = 0;\r\n        this.isAnimating = false;\r\n        this.animationCounter = 1;\r\n        this.comeback = false;\r\n        this.programs = programs;\r\n        if (this.programs.length == 0)\r\n            throw "Need at least 1 program!";\r\n    }\r\n    start(geon) {\r\n        this.programs[this.current];\r\n    }\r\n    update(geon) {\r\n        // listen for keypresses \r\n        // stupid i know. More specific listening would be better.\r\n        for (let i = 1; i < 10; i++) {\r\n            if (geon.IsKeyPressed(i.toString())) {\r\n                this.prepareSwapProgram(i - 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    draw(geon) {\r\n        // draw instructions \r\n        if (geon.program != null)\r\n            geon.r.text(geon.program.title, new Vector2(10, 20));\r\n        geon.r.text("tab using [1] - [2]", new Vector2(10, 50));\r\n        geon.r.text("use left and right mouse button to interact", new Vector2(10, 80));\r\n        if (geon.program != null)\r\n            geon.r.text(geon.program.description, new Vector2(10, 110));\r\n        // draw transitions\r\n        const speed = 0.015;\r\n        if (this.isAnimating) {\r\n            if (this.animationCounter > 1) {\r\n                this.isAnimating = false;\r\n            }\r\n            geon.r.clearFade(1 - this.animationCounter);\r\n            if (this.animationCounter > 0) {\r\n                if (this.comeback)\r\n                    this.animationCounter += speed;\r\n                else\r\n                    this.animationCounter -= speed;\r\n            }\r\n            else {\r\n                this.animationCounter += 0.01;\r\n                this.comeback = true;\r\n                this.swapProgram(geon);\r\n            }\r\n        }\r\n    }\r\n    prepareSwapProgram(num) {\r\n        if (num < 0 || num >= this.programs.length) {\r\n            console.log("no program [" + num.toString() + "].");\r\n            return;\r\n        }\r\n        console.log("swapping to program " + num.toString());\r\n        // prepare for animation\r\n        this.current = num;\r\n        this.isAnimating = true;\r\n        this.comeback = false;\r\n        this.animationCounter = 1;\r\n        // load\r\n        // fade in\r\n    }\r\n    swapProgram(geon) {\r\n        geon.load(new this.programs[this.current]());\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/BounceBallsProgram.ts\n\r\n\r\nclass BounceBallsProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.points = [];\r\n        this.vectors = [];\r\n        this.count = 100;\r\n        this.speed = 2;\r\n        this.title = \'bounce_balls\';\r\n        this.description = "press v to turn trails off";\r\n    }\r\n    start(geon) {\r\n        geon.r.slowfade = true;\r\n        this.points = new Array(this.count);\r\n        this.vectors = new Array(this.count);\r\n        for (let i = 0; i < this.count; i++) {\r\n            this.points[i] = Vector2.fromRandom().mul(geon.bounds);\r\n            this.vectors[i] = Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize();\r\n        }\r\n        console.log("created a bunch of points");\r\n    }\r\n    update(geon) {\r\n        for (let i = 0; i < this.count; i++) {\r\n            let p = this.points[i];\r\n            let v = this.vectors[i];\r\n            if (geon.mouseLeftDown) {\r\n                // disrupt the vector, based on how closeby the mouse is\r\n                let dir = Vector2.from2Pt(p, geon.mouse);\r\n                let length = dir.length();\r\n                dir.normalize().scale(Math.min(4, 100 / length));\r\n                v.add(dir);\r\n            }\r\n            p.add(v);\r\n            let length = v.length();\r\n            if (length > this.speed) {\r\n                v.setLength(length * 0.99);\r\n            }\r\n            // bounce at edge\r\n            if (p.x < 0 || p.x > geon.bounds.x)\r\n                v.x = -v.x;\r\n            if (p.y < 0 || p.y > geon.bounds.y)\r\n                v.y = -v.y;\r\n        }\r\n        // if mouse is nearby, move away from it\r\n        if (geon.mouseRightPressed) {\r\n            for (let i = 0; i < 100; i++) {\r\n                this.count += 1;\r\n                this.points.push(Vector2.fromRandom().mul(geon.bounds));\r\n                this.vectors.push(Vector2.fromRandom().sub(new Vector2(0.5, 0.5)).normalize());\r\n            }\r\n        }\r\n        if (geon.IsKeyPressed(\'v\')) {\r\n            console.log("tab");\r\n            geon.r.slowfade = !geon.r.slowfade;\r\n        }\r\n    }\r\n    draw(geon) {\r\n        this.points.forEach(p => geon.r.point(p.x, p.y));\r\n        // draw at mouse position;\r\n        if (geon.mouseLeftDown) {\r\n            geon.r.point(geon.mouse.x, geon.mouse.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/geo2/Delaunay.ts\n// author : Jos Feenstra\r\n// TODO: extend from a generic triangulation? might be nice to have\r\n\r\nclass Delaunay {\r\n    constructor() {\r\n        // ... Util\r\n        // store the last triangle\r\n        this.walkCursor = 0;\r\n        this.pts = [];\r\n        this.trs = [];\r\n        this.cc = [];\r\n        // init big base triangle\r\n        this.pts.push(new Vector2(-10000, -10000));\r\n        this.pts.push(new Vector2(10000, -10000));\r\n        this.pts.push(new Vector2(0, 10000));\r\n        this.trs.push([0, 1, 2, -1, -1, -1]);\r\n    }\r\n    // ... Getters \r\n    getVertices() {\r\n        return this.pts;\r\n    }\r\n    getEdges() {\r\n        let edges = [];\r\n        for (let tr of this.trs) {\r\n            let a = this.pts[tr[0]];\r\n            let b = this.pts[tr[1]];\r\n            let c = this.pts[tr[2]];\r\n            edges.push(a);\r\n            edges.push(b);\r\n            edges.push(a);\r\n            edges.push(c);\r\n            edges.push(b);\r\n            edges.push(c);\r\n        }\r\n        return edges;\r\n    }\r\n    getCC() {\r\n        return { cc: this.cc, r: this.cc.map((c, i) => c.disTo(this.pts[this.trs[i][0]])) };\r\n    }\r\n    calculateCC() {\r\n        this.cc = this.trs.map(tr => Vector2.fromCircumcenter(this.pts[tr[0]], this.pts[tr[1]], this.pts[tr[2]]));\r\n    }\r\n    getVoronoiEdges(calculateCC = false) {\r\n        let edges = [];\r\n        if (calculateCC || this.cc.length != this.trs.length)\r\n            this.calculateCC();\r\n        // per nb relation : if its not -1 : build an edge between nb cc\'s. \r\n        for (let i = 0; i < this.trs.length; i++) {\r\n            let triangle = this.trs[i];\r\n            for (let ii = 3; ii < 6; ii++) {\r\n                let nb = triangle[ii];\r\n                if (nb == -1)\r\n                    continue;\r\n                edges.push(this.cc[i]);\r\n                edges.push(this.cc[nb]);\r\n            }\r\n        }\r\n        return edges;\r\n    }\r\n    // ... Interface\r\n    Insert(insertion) {\r\n        // dont insert if too similar to existing \r\n        if (this.pts.some(v => insertion.roughlyEquals(v, 0.1))) {\r\n            console.log("to close to existing point");\r\n            return false;\r\n        }\r\n        // add it\r\n        const inID = this.pts.length;\r\n        this.pts.push(insertion);\r\n        // get triangle and ID values\r\n        const trID = this.selectTriangle(insertion);\r\n        if (trID == -1) {\r\n            console.log("triangle walk failed");\r\n            return false;\r\n        }\r\n        const tr = this.trs[trID];\r\n        const original_a_ID = tr[0];\r\n        const original_b_ID = tr[1];\r\n        const original_c_ID = tr[2];\r\n        const original_bcID = tr[3];\r\n        const original_caID = tr[4];\r\n        const original_abID = tr[5];\r\n        const abID = trID;\r\n        const bcID = this.trs.length;\r\n        const caID = this.trs.length + 1;\r\n        // edit 1 triangle, add 2 new ones \r\n        this.trs[trID] = [original_a_ID, original_b_ID, inID, bcID, caID, original_abID];\r\n        this.trs.push([original_b_ID, original_c_ID, inID, caID, abID, original_bcID]);\r\n        this.trs.push([original_c_ID, original_a_ID, inID, abID, bcID, original_caID]);\r\n        // fix topology\r\n        this.replaceNeighbor(original_bcID, trID, bcID);\r\n        this.replaceNeighbor(original_caID, trID, caID);\r\n        this.makeDelaunay([abID, bcID, caID], inID);\r\n        // succes!\r\n        return true;\r\n    }\r\n    selectTriangle(target) {\r\n        // select a triangle based on a walking triangle algorithm\r\n        const combinations = [[0, 1, 2], [1, 2, 0], [2, 0, 1]];\r\n        let trID = this.walkCursor;\r\n        for (let _ = 0; _ < this.trs.length; _++) {\r\n            for (let c of combinations) {\r\n                if (trID == -1)\r\n                    return -1;\r\n                let sign = Vector2.getSign(target, this.pts[this.trs[trID][c[0]]], this.pts[this.trs[trID][c[1]]]);\r\n                if (sign < 0) {\r\n                    trID = this.getNeighborTriangle(trID, this.trs[trID][c[2]]);\r\n                    break;\r\n                }\r\n                if (c[0] == 2) {\r\n                    this.walkCursor = trID;\r\n                    return trID;\r\n                }\r\n            }\r\n        }\r\n        // too many steps have been taken\r\n        this.walkCursor = 0;\r\n        return -1;\r\n    }\r\n    makeDelaunay(trIDS, pID) {\r\n        // flip until graph is delaunay\r\n        while (trIDS.length > 0) {\r\n            let trID = trIDS.pop();\r\n            let tr = this.trs[trID];\r\n            let nbID = this.getNeighborTriangle(trID, pID);\r\n            if (nbID == -1)\r\n                continue;\r\n            let qID = this.getNeighborPoint(nbID, trID);\r\n            let q = this.pts[qID];\r\n            let c = Vector2.fromCircumcenter(this.pts[tr[0]], this.pts[tr[1]], this.pts[tr[2]]);\r\n            if (c.equals(Vector2[NaN]())) {\r\n                continue;\r\n            }\r\n            let radius = c.disTo(this.pts[tr[0]]);\r\n            if (c.disTo(q) < radius) {\r\n                // flip!\r\n                // points p, q, r and s\r\n                const rID = tr[0];\r\n                const sID = tr[1];\r\n                // foreign neighbors \r\n                const fnb_1 = this.getNeighborTriangle(trID, rID);\r\n                const fnb_2 = this.getNeighborTriangle(trID, sID);\r\n                const fnb_3 = this.getNeighborTriangle(nbID, rID);\r\n                const fnb_4 = this.getNeighborTriangle(nbID, sID);\r\n                this.replaceNeighbor(fnb_1, trID, nbID);\r\n                this.replaceNeighbor(fnb_4, nbID, trID);\r\n                this.trs[trID] = [rID, qID, pID, nbID, fnb_2, fnb_4];\r\n                this.trs[nbID] = [qID, sID, pID, fnb_1, trID, fnb_3];\r\n                trIDS.push(trID);\r\n                trIDS.push(nbID);\r\n            }\r\n        }\r\n    }\r\n    // ... Helpers\r\n    replaceNeighbor(trID, nbOld, nbNew) {\r\n        // there are prettier ways, but this is fast\r\n        if (trID == -1)\r\n            return;\r\n        if (this.trs[trID][3] == nbOld)\r\n            this.trs[trID][3] = nbNew;\r\n        else if (this.trs[trID][4] == nbOld)\r\n            this.trs[trID][4] = nbNew;\r\n        else if (this.trs[trID][5] == nbOld)\r\n            this.trs[trID][5] = nbNew;\r\n        else\r\n            console.log("replace neighbor failed!");\r\n    }\r\n    getNeighborTriangle(triangleID, pointID) {\r\n        let index = -1;\r\n        if (this.trs[triangleID][0] == pointID)\r\n            index = 3;\r\n        if (this.trs[triangleID][1] == pointID)\r\n            index = 4;\r\n        if (this.trs[triangleID][2] == pointID)\r\n            index = 5;\r\n        return this.trs[triangleID][index];\r\n    }\r\n    getNeighborPoint(triangleID, neighborID) {\r\n        let index = -1;\r\n        if (this.trs[triangleID][3] == neighborID)\r\n            index = 0;\r\n        if (this.trs[triangleID][4] == neighborID)\r\n            index = 1;\r\n        if (this.trs[triangleID][5] == neighborID)\r\n            index = 2;\r\n        return this.trs[triangleID][index];\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/ProgramHelpers.ts\n\r\nclass ProgramHelpers {\r\n    static getMovementVector(geon, minspeed, maxspeed) {\r\n        let speed = minspeed;\r\n        let velocity = new Vector2(0, 0);\r\n        if (geon.IsKeyDown("shift"))\r\n            speed = maxspeed;\r\n        if (geon.IsKeyDown("arrowup") || geon.IsKeyDown("w"))\r\n            velocity.add(new Vector2(0, 1));\r\n        if (geon.IsKeyDown("arrowdown") || geon.IsKeyDown("s"))\r\n            velocity.add(new Vector2(0, -1));\r\n        if (geon.IsKeyDown("arrowleft") || geon.IsKeyDown("a"))\r\n            velocity.add(new Vector2(1, 0));\r\n        if (geon.IsKeyDown("arrowright") || geon.IsKeyDown("d"))\r\n            velocity.add(new Vector2(-1, 0));\r\n        return velocity.setLength(speed);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/programs/DelaunayProgram.ts\n\r\n\r\n\r\n\r\nclass DelaunayProgram extends Program {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.SWITCH_KEY = \'v\';\r\n        this.switch = 0;\r\n        this.dt = new Delaunay();\r\n        this.p = [];\r\n        // overrides\r\n        this.title = \'delaunay\';\r\n        this.description = `use ${this.SWITCH_KEY} to change visuals`;\r\n    }\r\n    start(geon) {\r\n        let pt = new Vector2(geon.width / 2, geon.height / 2);\r\n        this.add(pt);\r\n    }\r\n    update(geon) {\r\n        if (geon.mouseLeftPressed) {\r\n            let insertion = Vector2.fromCopy(geon.worldMouse);\r\n            this.add(insertion);\r\n        }\r\n        if (geon.mouseRightDown) {\r\n            this.pull(geon.worldMouse);\r\n        }\r\n        if (geon.IsKeyPressed(this.SWITCH_KEY)) {\r\n            this.switch += 1;\r\n            if (this.switch > 2)\r\n                this.switch = 0;\r\n        }\r\n        // lerp dt back to original\r\n        this.dt.getVertices().forEach((e, i) => {\r\n            e.lerp(this.p[i], 0.05);\r\n        });\r\n        // update camera\r\n        let vel = ProgramHelpers.getMovementVector(geon, 2 / geon.r.scale, 5 / geon.r.scale);\r\n        geon.r.offset.add(vel);\r\n        if (geon.IsKeyPressed(\'q\'))\r\n            geon.r.scale *= 1.5;\r\n        if (geon.IsKeyPressed(\'e\'))\r\n            geon.r.scale *= 0.5;\r\n    }\r\n    draw(geon) {\r\n        // draw cursor\r\n        geon.r.point(geon.mouse.x, geon.mouse.y);\r\n        // draw points\r\n        geon.r.points(this.dt.getVertices());\r\n        if (this.switch == 0) {\r\n            // draw delaunay triangulation\r\n            geon.r.lineSegments(this.dt.getEdges());\r\n        }\r\n        else if (this.switch == 1) {\r\n            // draw voronoi diagram\r\n            geon.r.lineSegments(this.dt.getVoronoiEdges(true));\r\n        }\r\n        else if (this.switch == 2) {\r\n            //draw circumcircles\r\n            this.dt.calculateCC();\r\n            let data = this.dt.getCC();\r\n            geon.r.circles(data.cc, data.r);\r\n        }\r\n    }\r\n    // ...\r\n    add(v) {\r\n        // simulate impact\r\n        this.dt.Insert(v);\r\n        // original points\r\n        this.p = this.dt.getVertices().map(e => {\r\n            return e.clone();\r\n        });\r\n        this.disturb(v, 20, 800);\r\n    }\r\n    pull(v) {\r\n        // displace dt \r\n        // this.dt.getVertices().forEach(e => {\r\n        //     e.add(Vector2.fromRandomAngle().scale(Math.min(10, 500 / e.disTo(v))))\r\n        // })\r\n        // displace dt \r\n        let vertices = this.dt.getVertices();\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            let e = vertices[i];\r\n            let target = this.p[i];\r\n            let difference = Vector2.from2Pt(v, target);\r\n            let length = difference.length();\r\n            if (length < 5)\r\n                continue;\r\n            e.add(difference.normalize().scale(Math.min(1, 500 / length)));\r\n        }\r\n    }\r\n    disturb(v, strength, range) {\r\n        // displace dt \r\n        this.dt.getVertices().forEach(e => {\r\n            e.add(Vector2.fromRandomAngle().scale(Math.min(strength, range / e.disTo(v))));\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\nconst programs = [\r\n    BounceBallsProgram,\r\n    DelaunayProgram\r\n];\r\nconst meta = new SelectorMetaProgram(programs);\r\nconst canvas = document.getElementById("canvas");\r\nconst geon = new Geon(canvas);\r\ngeon.loadMeta(meta); // program selector\r\ngeon.load(new BounceBallsProgram()); // first program to load \r\nconsole.log("everything loaded.");\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///679\n')})();